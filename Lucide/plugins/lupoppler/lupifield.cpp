
/*
 *  This file was generated by the SOM Compiler.
 *  Generated using:
 *     SOM incremental update: 2.24
 */


/* ***** BEGIN LICENSE BLOCK *****
 * Version: CDDL 1.0/LGPL 2.1
 *
 * The contents of this file are subject to the COMMON DEVELOPMENT AND
 * DISTRIBUTION LICENSE (CDDL) Version 1.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at http://www.sun.com/cddl/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Initial Developer of the Original Code is
 * Dmitry A. Kuminov, netlabs.org.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the LGPL are applicable instead of those
 * above. If you wish to allow use of your version of this file only under the
 * terms of the LGPL, and not to allow others to use your version of this file
 * under the terms of the CDDL, indicate your decision by deleting the
 * provisions above and replace them with the notice and other provisions
 * required by the LGPL. If you do not delete the provisions above, a recipient
 * may use your version of this file under the terms of any one of the CDDL
 * or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */



/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using template emitter:
 *      SOM Emitter emitxtm: 2.23.1.9
 */

#ifndef SOM_Module_lupifield_Source
#define SOM_Module_lupifield_Source
#endif
#define LuPopplerInputField_Class_Source

#include "lupifield.xih"

#include <Page.h>


SOM_Scope void SOMLINK init_widget(LuPopplerInputField *somSelf,
                                    Environment *ev, somInitCtrl* ctrl,
                                   LuPopplerDocument* aDoc, long aPagenum,
                                   Page* aPage, FormWidget* aFormWidget)
{
    LuPopplerInputFieldData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    LuPopplerInputField_BeginInitializer_init_widget;

    LuPopplerInputField_Init_LuInputField_somDefaultInit(somSelf, ctrl);

    /* local LuPopplerInputField initialization code */

    somThis->doc = aDoc;
    somThis->pagenum = aPagenum;
    somThis->page = aPage;
    somThis->widget = aFormWidget;
    somThis->rect.x1 = 0.;
    somThis->rect.x2 = 0.;
    somThis->rect.y1 = 0.;
    somThis->rect.y2 = 0.;
}


SOM_Scope void SOMLINK somDestruct(LuPopplerInputField *somSelf,
                                   octet doFree, som3DestructCtrl* ctrl)
{
    LuPopplerInputFieldData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    LuPopplerInputField_BeginDestructor;

    /* local LuPopplerInputField deinitialization code */

    LuPopplerInputField_EndDestructor;
}


SOM_Scope LuInputField_Type  SOMLINK getType(LuPopplerInputField *somSelf,
                                              Environment *ev)
{
    LuPopplerInputFieldData *somThis = LuPopplerInputFieldGetData(somSelf);

    LuInputField_Type type = LuInputField_Undefined;
    switch( somThis->widget->getType() ) {
        case formButton:    type = LuInputField_Button; break;
        case formText:      type = LuInputField_Text; break;
        case formChoice:    type = LuInputField_Choice; break;
        case formSignature: type = LuInputField_Signature; break;
        default: break;
    }

    return type;
}

SOM_Scope LuRectangle*  SOMLINK getRectangle(LuPopplerInputField *somSelf,
                                              Environment *ev)
{
    LuPopplerInputFieldData *somThis = LuPopplerInputFieldGetData(somSelf);

    somThis->widget->getRect( &somThis->rect.x1, &somThis->rect.y1,
                              &somThis->rect.x2, &somThis->rect.y2 );

    // see LuPopplerDocument::getLinkMapping()

    double height = 0;
    somThis->doc->getPageSize( ev, somThis->pagenum, NULL, &height );

    somThis->rect.x1 -= somThis->page->getCropBox()->x1;
    somThis->rect.x2 -= somThis->page->getCropBox()->x1;
    somThis->rect.y1 -= somThis->page->getCropBox()->y1;
    somThis->rect.y2 -= somThis->page->getCropBox()->y1;

    double y1 = somThis->rect.y1;
    double y2 = somThis->rect.y2;
    somThis->rect.y1 = height - y2;
    somThis->rect.y2 = height - y1;

    return &somThis->rect;
}

SOM_Scope unsigned long  SOMLINK getID(LuPopplerInputField *somSelf,
                                        Environment *ev)
{
    LuPopplerInputFieldData *somThis = LuPopplerInputFieldGetData(somSelf);

    return somThis->widget->getID();
}

SOM_Scope boolean  SOMLINK isModified(LuPopplerInputField *somSelf,
                                       Environment *ev)
{
    LuPopplerInputFieldData *somThis = LuPopplerInputFieldGetData(somSelf);

    return somThis->widget->isModified();
}

SOM_Scope boolean  SOMLINK isReadOnly(LuPopplerInputField *somSelf,
                                       Environment *ev)
{
    LuPopplerInputFieldData *somThis = LuPopplerInputFieldGetData(somSelf);

    return somThis->widget->isReadOnly();
}

