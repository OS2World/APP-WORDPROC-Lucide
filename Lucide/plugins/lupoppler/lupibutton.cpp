
/*
 *  This file was generated by the SOM Compiler.
 *  Generated using:
 *     SOM incremental update: 2.24
 */


/* ***** BEGIN LICENSE BLOCK *****
 * Version: CDDL 1.0/LGPL 2.1
 *
 * The contents of this file are subject to the COMMON DEVELOPMENT AND
 * DISTRIBUTION LICENSE (CDDL) Version 1.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at http://www.sun.com/cddl/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Initial Developer of the Original Code is
 * Dmitry A. Kuminov, netlabs.org.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the LGPL are applicable instead of those
 * above. If you wish to allow use of your version of this file only under the
 * terms of the LGPL, and not to allow others to use your version of this file
 * under the terms of the CDDL, indicate your decision by deleting the
 * provisions above and replace them with the notice and other provisions
 * required by the LGPL. If you do not delete the provisions above, a recipient
 * may use your version of this file under the terms of any one of the CDDL
 * or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */



/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using template emitter:
 *      SOM Emitter emitxtm: 2.23.1.9
 */

#ifndef SOM_Module_lupibutton_Source
#define SOM_Module_lupibutton_Source
#endif
#define LuPopplerInputButton_Class_Source

#include "lupibutton.xih"


SOM_Scope void SOMLINK init_widgetButton(LuPopplerInputButton *somSelf,
                                          Environment *ev, somInitCtrl* ctrl,
                                         LuPopplerDocument* aDoc,
                                         long aPagenum, Page* aPage,
                                         FormWidgetButton* aFormWidgetButton)
{
    LuPopplerInputButtonData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    LuPopplerInputButton_BeginInitializer_init_widgetButton;

    LuPopplerInputButton_Init_LuPopplerInputField_init_widget(somSelf, ev, ctrl,
                                                              aDoc, aPagenum, aPage,
                                                              aFormWidgetButton);
    LuPopplerInputButton_Init_LuInputButton_somDefaultInit(somSelf, ctrl);

    /* local LuPopplerInputField initialization code */

    somThis->widget = aFormWidgetButton;
}


SOM_Scope void SOMLINK somDestruct(LuPopplerInputButton *somSelf,
                                   octet doFree, som3DestructCtrl* ctrl)
{
    LuPopplerInputButtonData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    LuPopplerInputButton_BeginDestructor;

    /* local LuPopplerInputField deinitialization code */

    LuPopplerInputButton_EndDestructor;
}


SOM_Scope LuInputButton_ButtonType  SOMLINK getButtonType(LuPopplerInputButton *somSelf,
                                                           Environment *ev)
{
    LuPopplerInputButtonData *somThis = LuPopplerInputButtonGetData(somSelf);

    LuInputButton_ButtonType type = LuInputButton_Undefined;

    switch ( somThis->widget->getButtonType() ) {
        case formButtonCheck:   type = LuInputButton_Check; break;
        case formButtonPush:    type = LuInputButton_Push; break;
        case formButtonRadio:   type = LuInputButton_Radio; break;
        default:
            break;
    }

    return type;
}

SOM_Scope boolean  SOMLINK getState(LuPopplerInputButton *somSelf,
                                     Environment *ev)
{
    LuPopplerInputButtonData *somThis = LuPopplerInputButtonGetData(somSelf);

    return somThis->widget->getState();
}

SOM_Scope void  SOMLINK setState(LuPopplerInputButton *somSelf,
                                  Environment *ev, boolean aState)
{
    LuPopplerInputButtonData *somThis = LuPopplerInputButtonGetData(somSelf);

    somThis->widget->setState( aState );
}

SOM_Scope string  SOMLINK getText(LuPopplerInputButton *somSelf,
                                   Environment *ev)
{
    LuPopplerInputButtonData *somThis = LuPopplerInputButtonGetData(somSelf);

    return somThis->widget->getOnStr();
}

SOM_Scope LuInputButton_SiblingSequence*  SOMLINK getSiblings(LuPopplerInputButton *somSelf,
                                                               Environment *ev)
{
    LuPopplerInputButtonData *somThis = LuPopplerInputButtonGetData(somSelf);

    int count = somThis->widget->getNumSiblingsID();

    LuInputButton_SiblingSequence* siblings = (LuInputButton_SiblingSequence *)
        SOMMalloc( sizeof( LuInputButton_SiblingSequence ) );
    siblings->_maximum = count;
    siblings->_length = count;
    siblings->_buffer = (unsigned long *)SOMMalloc( sizeof( unsigned long * ) * count );

    unsigned *ids = somThis->widget->getSiblingsID();
    for ( int i = 0; i < count; ++i )
        siblings->_buffer[ i ] = ids[ i ];

    return siblings;
}

