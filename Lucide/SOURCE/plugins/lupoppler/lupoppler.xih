
/*
 * This file was generated by the SOM Compiler.
 * FileName: lupoppler.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxih: 2.47
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_LuPopplerDocument_xih
#define SOM_LuPopplerDocument_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_LuPopplerDocument_xh
#include <lupoppler.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define LuPopplerDocument_MaxNoMethods 0

/*
 * -- Instance Data
 */
typedef struct {
	void* data;
} LuPopplerDocumentData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef LuPopplerDocumentData* (SOMLINK * somTD_LuPopplerDocument_DataThunk)(void*);
#define LuPopplerDocumentGetData(somSelf) \
   (((somTD_LuPopplerDocument_DataThunk)(LuPopplerDocumentCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _data (somThis->data)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(LuPopplerDocument_Class_Source) || defined(SOM_Module_lupoppler_Source))

/*
 * Trace/Debug macro
 */
#ifndef LuPopplerDocumentMethodDebug
   #define LuPopplerDocumentMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _loadFile somSelf->loadFile
  #define _isScalable somSelf->isScalable
  #define _isRotable somSelf->isRotable
  #define _getPageCount somSelf->getPageCount
  #define _getPageSize somSelf->getPageSize
  #define _renderPageToPixbuf somSelf->renderPageToPixbuf
  #define _isAsynchRenderingSupported somSelf->isAsynchRenderingSupported
  #define _renderPageToPixbufAsynch somSelf->renderPageToPixbufAsynch
  #define _isHaveText somSelf->isHaveText
  #define _getSelectionRectangles somSelf->getSelectionRectangles
  #define _freeRectangles somSelf->freeRectangles
  #define _getText somSelf->getText
  #define _isHaveLinks somSelf->isHaveLinks
  #define _getLinkMapping somSelf->getLinkMapping
  #define _freeLinkMapping somSelf->freeLinkMapping
  #define _isSaveable somSelf->isSaveable
  #define _saveAs somSelf->saveAs
  #define _isPSExportable somSelf->isPSExportable
  #define _exportToPS somSelf->exportToPS
  #define _isHaveFontInfo somSelf->isHaveFontInfo
  #define _getFontInfo somSelf->getFontInfo
  #define _freeFontInfo somSelf->freeFontInfo
  #define _isHaveIndex somSelf->isHaveIndex
  #define _getIndex somSelf->getIndex
  #define _getDocumentInfo somSelf->getDocumentInfo
  #define _freeDocumentInfo somSelf->freeDocumentInfo
  #define _getThumbnailSize somSelf->getThumbnailSize
  #define _getThumbnail somSelf->getThumbnail
  #define _searchText somSelf->searchText
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _loadFile somSelf->loadFile
  #define _isScalable somSelf->isScalable
  #define _isRotable somSelf->isRotable
  #define _getPageCount somSelf->getPageCount
  #define _getPageSize somSelf->getPageSize
  #define _renderPageToPixbuf somSelf->renderPageToPixbuf
  #define _isAsynchRenderingSupported somSelf->isAsynchRenderingSupported
  #define _renderPageToPixbufAsynch somSelf->renderPageToPixbufAsynch
  #define _getSelectionRectangles somSelf->getSelectionRectangles
  #define _isHaveText somSelf->isHaveText
  #define _getText somSelf->getText
  #define _isHaveLinks somSelf->isHaveLinks
  #define _getLinkMapping somSelf->getLinkMapping
  #define _isSaveable somSelf->isSaveable
  #define _saveAs somSelf->saveAs
  #define _isPSExportable somSelf->isPSExportable
  #define _exportToPS somSelf->exportToPS
  #define _isHaveFontInfo somSelf->isHaveFontInfo
  #define _getFontInfo somSelf->getFontInfo
  #define _isHaveIndex somSelf->isHaveIndex
  #define _getIndex somSelf->getIndex
  #define _getDocumentInfo somSelf->getDocumentInfo
  #define _getThumbnailSize somSelf->getThumbnailSize
  #define _getThumbnail somSelf->getThumbnail
  #define _searchText somSelf->searchText
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The LuPopplerDocument ClassData Structure
 */
SOMEXTERN struct LuPopplerDocumentClassDataStructure SOMDLINK LuPopplerDocumentClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary LuPopplerDocument ClassData structure
 */
SOMEXTERN struct LuPopplerDocumentCClassDataStructure SOMDLINK LuPopplerDocumentCClassData = {(somMethodTabs) NULL};


/*
 * Overridden method: loadFile
 */
SOM_Scope boolean  SOMLINK loadFile(LuPopplerDocument *somSelf, Environment *ev,
		string filename,
		string password,
		string* error);
static char *somMN_LuPopplerDocumentloadFile = "LuDocument::loadFile";
static somId somId_LuPopplerDocumentloadFile = &somMN_LuPopplerDocumentloadFile;
#ifdef somId_loadFile
#undef somId_loadFile
#else
#define somId_loadFile somId_LuPopplerDocumentloadFile
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_loadFile(LuPopplerDocument *somSelf, Environment *ev, 
		string filename, 
		string password, 
		string* error);
typedef somTP_xih_LuPopplerDocument_loadFile *somTD_xih_LuPopplerDocument_loadFile;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_loadFile_resolved;
#define LuPopplerDocument_parent_LuDocument_loadFile(somSelf,ev,filename,password,error) \
  ((( somTD_xih_LuPopplerDocument_loadFile ) \
      LuPopplerDocument_parent_LuDocument_loadFile_resolved) \
	(somSelf,ev,filename,password,error))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_loadFile
  #ifdef parent_loadFile
    #define SOMGD_pmc_parent_loadFile
    #undef parent_loadFile
  #else
#define parent_loadFile LuPopplerDocument_parent_LuDocument_loadFile
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_loadFile
  #ifdef parent_LuDocument_loadFile
    #define SOMGD_pmc_parent_LuDocument_loadFile
    #undef parent_LuDocument_loadFile
  #else
    #define parent_LuDocument_loadFile LuPopplerDocument_parent_LuDocument_loadFile
  #endif
#endif
#define LuPopplerDocument_parents_loadFile(somSelf,ev,filename,password,error) (\
   LuPopplerDocument_parent_LuDocument_loadFile(somSelf,ev,filename,password,error))

/*
 * Overridden method: isScalable
 */
SOM_Scope boolean  SOMLINK isScalable(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentisScalable = "LuDocument::isScalable";
static somId somId_LuPopplerDocumentisScalable = &somMN_LuPopplerDocumentisScalable;
#ifdef somId_isScalable
#undef somId_isScalable
#else
#define somId_isScalable somId_LuPopplerDocumentisScalable
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_isScalable(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_isScalable *somTD_xih_LuPopplerDocument_isScalable;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_isScalable_resolved;
#define LuPopplerDocument_parent_LuDocument_isScalable(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_isScalable ) \
      LuPopplerDocument_parent_LuDocument_isScalable_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_isScalable
  #ifdef parent_isScalable
    #define SOMGD_pmc_parent_isScalable
    #undef parent_isScalable
  #else
#define parent_isScalable LuPopplerDocument_parent_LuDocument_isScalable
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_isScalable
  #ifdef parent_LuDocument_isScalable
    #define SOMGD_pmc_parent_LuDocument_isScalable
    #undef parent_LuDocument_isScalable
  #else
    #define parent_LuDocument_isScalable LuPopplerDocument_parent_LuDocument_isScalable
  #endif
#endif
#define LuPopplerDocument_parents_isScalable(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_isScalable(somSelf,ev))

/*
 * Overridden method: isRotable
 */
SOM_Scope boolean  SOMLINK isRotable(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentisRotable = "LuDocument::isRotable";
static somId somId_LuPopplerDocumentisRotable = &somMN_LuPopplerDocumentisRotable;
#ifdef somId_isRotable
#undef somId_isRotable
#else
#define somId_isRotable somId_LuPopplerDocumentisRotable
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_isRotable(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_isRotable *somTD_xih_LuPopplerDocument_isRotable;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_isRotable_resolved;
#define LuPopplerDocument_parent_LuDocument_isRotable(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_isRotable ) \
      LuPopplerDocument_parent_LuDocument_isRotable_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_isRotable
  #ifdef parent_isRotable
    #define SOMGD_pmc_parent_isRotable
    #undef parent_isRotable
  #else
#define parent_isRotable LuPopplerDocument_parent_LuDocument_isRotable
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_isRotable
  #ifdef parent_LuDocument_isRotable
    #define SOMGD_pmc_parent_LuDocument_isRotable
    #undef parent_LuDocument_isRotable
  #else
    #define parent_LuDocument_isRotable LuPopplerDocument_parent_LuDocument_isRotable
  #endif
#endif
#define LuPopplerDocument_parents_isRotable(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_isRotable(somSelf,ev))

/*
 * Overridden method: getPageCount
 */
SOM_Scope long  SOMLINK getPageCount(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentgetPageCount = "LuDocument::getPageCount";
static somId somId_LuPopplerDocumentgetPageCount = &somMN_LuPopplerDocumentgetPageCount;
#ifdef somId_getPageCount
#undef somId_getPageCount
#else
#define somId_getPageCount somId_LuPopplerDocumentgetPageCount
#endif
typedef long   SOMLINK somTP_xih_LuPopplerDocument_getPageCount(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_getPageCount *somTD_xih_LuPopplerDocument_getPageCount;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_getPageCount_resolved;
#define LuPopplerDocument_parent_LuDocument_getPageCount(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_getPageCount ) \
      LuPopplerDocument_parent_LuDocument_getPageCount_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getPageCount
  #ifdef parent_getPageCount
    #define SOMGD_pmc_parent_getPageCount
    #undef parent_getPageCount
  #else
#define parent_getPageCount LuPopplerDocument_parent_LuDocument_getPageCount
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getPageCount
  #ifdef parent_LuDocument_getPageCount
    #define SOMGD_pmc_parent_LuDocument_getPageCount
    #undef parent_LuDocument_getPageCount
  #else
    #define parent_LuDocument_getPageCount LuPopplerDocument_parent_LuDocument_getPageCount
  #endif
#endif
#define LuPopplerDocument_parents_getPageCount(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_getPageCount(somSelf,ev))

/*
 * Overridden method: getPageSize
 */
SOM_Scope void  SOMLINK getPageSize(LuPopplerDocument *somSelf, Environment *ev,
		long pagenum,
		double* width,
		double* height);
static char *somMN_LuPopplerDocumentgetPageSize = "LuDocument::getPageSize";
static somId somId_LuPopplerDocumentgetPageSize = &somMN_LuPopplerDocumentgetPageSize;
#ifdef somId_getPageSize
#undef somId_getPageSize
#else
#define somId_getPageSize somId_LuPopplerDocumentgetPageSize
#endif
typedef void   SOMLINK somTP_xih_LuPopplerDocument_getPageSize(LuPopplerDocument *somSelf, Environment *ev, 
		long pagenum, 
		double* width, 
		double* height);
typedef somTP_xih_LuPopplerDocument_getPageSize *somTD_xih_LuPopplerDocument_getPageSize;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_getPageSize_resolved;
#define LuPopplerDocument_parent_LuDocument_getPageSize(somSelf,ev,pagenum,width,height) \
  ((( somTD_xih_LuPopplerDocument_getPageSize ) \
      LuPopplerDocument_parent_LuDocument_getPageSize_resolved) \
	(somSelf,ev,pagenum,width,height))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getPageSize
  #ifdef parent_getPageSize
    #define SOMGD_pmc_parent_getPageSize
    #undef parent_getPageSize
  #else
#define parent_getPageSize LuPopplerDocument_parent_LuDocument_getPageSize
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getPageSize
  #ifdef parent_LuDocument_getPageSize
    #define SOMGD_pmc_parent_LuDocument_getPageSize
    #undef parent_LuDocument_getPageSize
  #else
    #define parent_LuDocument_getPageSize LuPopplerDocument_parent_LuDocument_getPageSize
  #endif
#endif
#define LuPopplerDocument_parents_getPageSize(somSelf,ev,pagenum,width,height) (\
   LuPopplerDocument_parent_LuDocument_getPageSize(somSelf,ev,pagenum,width,height))

/*
 * Overridden method: renderPageToPixbuf
 */
SOM_Scope void  SOMLINK renderPageToPixbuf(LuPopplerDocument *somSelf, Environment *ev,
		long pagenum,
		long src_x,
		long src_y,
		long src_width,
		long src_height,
		double scale,
		long rotation,
		LuPixbuf* pixbuf);
static char *somMN_LuPopplerDocumentrenderPageToPixbuf = "LuDocument::renderPageToPixbuf";
static somId somId_LuPopplerDocumentrenderPageToPixbuf = &somMN_LuPopplerDocumentrenderPageToPixbuf;
#ifdef somId_renderPageToPixbuf
#undef somId_renderPageToPixbuf
#else
#define somId_renderPageToPixbuf somId_LuPopplerDocumentrenderPageToPixbuf
#endif
typedef void   SOMLINK somTP_xih_LuPopplerDocument_renderPageToPixbuf(LuPopplerDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf);
typedef somTP_xih_LuPopplerDocument_renderPageToPixbuf *somTD_xih_LuPopplerDocument_renderPageToPixbuf;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_renderPageToPixbuf_resolved;
#define LuPopplerDocument_parent_LuDocument_renderPageToPixbuf(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf) \
  ((( somTD_xih_LuPopplerDocument_renderPageToPixbuf ) \
      LuPopplerDocument_parent_LuDocument_renderPageToPixbuf_resolved) \
	(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_renderPageToPixbuf
  #ifdef parent_renderPageToPixbuf
    #define SOMGD_pmc_parent_renderPageToPixbuf
    #undef parent_renderPageToPixbuf
  #else
#define parent_renderPageToPixbuf LuPopplerDocument_parent_LuDocument_renderPageToPixbuf
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_renderPageToPixbuf
  #ifdef parent_LuDocument_renderPageToPixbuf
    #define SOMGD_pmc_parent_LuDocument_renderPageToPixbuf
    #undef parent_LuDocument_renderPageToPixbuf
  #else
    #define parent_LuDocument_renderPageToPixbuf LuPopplerDocument_parent_LuDocument_renderPageToPixbuf
  #endif
#endif
#define LuPopplerDocument_parents_renderPageToPixbuf(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf) (\
   LuPopplerDocument_parent_LuDocument_renderPageToPixbuf(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf))

/*
 * Overridden method: isAsynchRenderingSupported
 */
SOM_Scope boolean  SOMLINK isAsynchRenderingSupported(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentisAsynchRenderingSupported = "LuDocument::isAsynchRenderingSupported";
static somId somId_LuPopplerDocumentisAsynchRenderingSupported = &somMN_LuPopplerDocumentisAsynchRenderingSupported;
#ifdef somId_isAsynchRenderingSupported
#undef somId_isAsynchRenderingSupported
#else
#define somId_isAsynchRenderingSupported somId_LuPopplerDocumentisAsynchRenderingSupported
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_isAsynchRenderingSupported(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_isAsynchRenderingSupported *somTD_xih_LuPopplerDocument_isAsynchRenderingSupported;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_isAsynchRenderingSupported_resolved;
#define LuPopplerDocument_parent_LuDocument_isAsynchRenderingSupported(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_isAsynchRenderingSupported ) \
      LuPopplerDocument_parent_LuDocument_isAsynchRenderingSupported_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_isAsynchRenderingSupported
  #ifdef parent_isAsynchRenderingSupported
    #define SOMGD_pmc_parent_isAsynchRenderingSupported
    #undef parent_isAsynchRenderingSupported
  #else
#define parent_isAsynchRenderingSupported LuPopplerDocument_parent_LuDocument_isAsynchRenderingSupported
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_isAsynchRenderingSupported
  #ifdef parent_LuDocument_isAsynchRenderingSupported
    #define SOMGD_pmc_parent_LuDocument_isAsynchRenderingSupported
    #undef parent_LuDocument_isAsynchRenderingSupported
  #else
    #define parent_LuDocument_isAsynchRenderingSupported LuPopplerDocument_parent_LuDocument_isAsynchRenderingSupported
  #endif
#endif
#define LuPopplerDocument_parents_isAsynchRenderingSupported(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_isAsynchRenderingSupported(somSelf,ev))

/*
 * Overridden method: renderPageToPixbufAsynch
 */
SOM_Scope void  SOMLINK renderPageToPixbufAsynch(LuPopplerDocument *somSelf, Environment *ev,
		long pagenum,
		long src_x,
		long src_y,
		long src_width,
		long src_height,
		double scale,
		long rotation,
		LuPixbuf* pixbuf,
		LuDocument_asynchCallbackFn fnd,
		LuDocument_asynchCallbackFn fna,
		somToken fndata);
static char *somMN_LuPopplerDocumentrenderPageToPixbufAsynch = "LuDocument::renderPageToPixbufAsynch";
static somId somId_LuPopplerDocumentrenderPageToPixbufAsynch = &somMN_LuPopplerDocumentrenderPageToPixbufAsynch;
#ifdef somId_renderPageToPixbufAsynch
#undef somId_renderPageToPixbufAsynch
#else
#define somId_renderPageToPixbufAsynch somId_LuPopplerDocumentrenderPageToPixbufAsynch
#endif
typedef void   SOMLINK somTP_xih_LuPopplerDocument_renderPageToPixbufAsynch(LuPopplerDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf, 
		LuDocument_asynchCallbackFn fnd, 
		LuDocument_asynchCallbackFn fna, 
		somToken fndata);
typedef somTP_xih_LuPopplerDocument_renderPageToPixbufAsynch *somTD_xih_LuPopplerDocument_renderPageToPixbufAsynch;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_renderPageToPixbufAsynch_resolved;
#define LuPopplerDocument_parent_LuDocument_renderPageToPixbufAsynch(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf,fnd,fna,fndata) \
  ((( somTD_xih_LuPopplerDocument_renderPageToPixbufAsynch ) \
      LuPopplerDocument_parent_LuDocument_renderPageToPixbufAsynch_resolved) \
	(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf,fnd,fna,fndata))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_renderPageToPixbufAsynch
  #ifdef parent_renderPageToPixbufAsynch
    #define SOMGD_pmc_parent_renderPageToPixbufAsynch
    #undef parent_renderPageToPixbufAsynch
  #else
#define parent_renderPageToPixbufAsynch LuPopplerDocument_parent_LuDocument_renderPageToPixbufAsynch
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_renderPageToPixbufAsynch
  #ifdef parent_LuDocument_renderPageToPixbufAsynch
    #define SOMGD_pmc_parent_LuDocument_renderPageToPixbufAsynch
    #undef parent_LuDocument_renderPageToPixbufAsynch
  #else
    #define parent_LuDocument_renderPageToPixbufAsynch LuPopplerDocument_parent_LuDocument_renderPageToPixbufAsynch
  #endif
#endif
#define LuPopplerDocument_parents_renderPageToPixbufAsynch(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf,fnd,fna,fndata) (\
   LuPopplerDocument_parent_LuDocument_renderPageToPixbufAsynch(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf,fnd,fna,fndata))

/*
 * Overridden method: getSelectionRectangles
 */
SOM_Scope LuDocument_LuRectSequence*  SOMLINK getSelectionRectangles(LuPopplerDocument *somSelf, Environment *ev,
		long pagenum,
		double scale,
		LuRectangle* selection);
static char *somMN_LuPopplerDocumentgetSelectionRectangles = "LuDocument::getSelectionRectangles";
static somId somId_LuPopplerDocumentgetSelectionRectangles = &somMN_LuPopplerDocumentgetSelectionRectangles;
#ifdef somId_getSelectionRectangles
#undef somId_getSelectionRectangles
#else
#define somId_getSelectionRectangles somId_LuPopplerDocumentgetSelectionRectangles
#endif
typedef LuDocument_LuRectSequence*   SOMLINK somTP_xih_LuPopplerDocument_getSelectionRectangles(LuPopplerDocument *somSelf, Environment *ev, 
		long pagenum, 
		double scale, 
		LuRectangle* selection);
typedef somTP_xih_LuPopplerDocument_getSelectionRectangles *somTD_xih_LuPopplerDocument_getSelectionRectangles;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_getSelectionRectangles_resolved;
#define LuPopplerDocument_parent_LuDocument_getSelectionRectangles(somSelf,ev,pagenum,scale,selection) \
  ((( somTD_xih_LuPopplerDocument_getSelectionRectangles ) \
      LuPopplerDocument_parent_LuDocument_getSelectionRectangles_resolved) \
	(somSelf,ev,pagenum,scale,selection))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getSelectionRectangles
  #ifdef parent_getSelectionRectangles
    #define SOMGD_pmc_parent_getSelectionRectangles
    #undef parent_getSelectionRectangles
  #else
#define parent_getSelectionRectangles LuPopplerDocument_parent_LuDocument_getSelectionRectangles
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getSelectionRectangles
  #ifdef parent_LuDocument_getSelectionRectangles
    #define SOMGD_pmc_parent_LuDocument_getSelectionRectangles
    #undef parent_LuDocument_getSelectionRectangles
  #else
    #define parent_LuDocument_getSelectionRectangles LuPopplerDocument_parent_LuDocument_getSelectionRectangles
  #endif
#endif
#define LuPopplerDocument_parents_getSelectionRectangles(somSelf,ev,pagenum,scale,selection) (\
   LuPopplerDocument_parent_LuDocument_getSelectionRectangles(somSelf,ev,pagenum,scale,selection))

/*
 * Overridden method: isHaveText
 */
SOM_Scope boolean  SOMLINK isHaveText(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentisHaveText = "LuDocument::isHaveText";
static somId somId_LuPopplerDocumentisHaveText = &somMN_LuPopplerDocumentisHaveText;
#ifdef somId_isHaveText
#undef somId_isHaveText
#else
#define somId_isHaveText somId_LuPopplerDocumentisHaveText
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_isHaveText(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_isHaveText *somTD_xih_LuPopplerDocument_isHaveText;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_isHaveText_resolved;
#define LuPopplerDocument_parent_LuDocument_isHaveText(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_isHaveText ) \
      LuPopplerDocument_parent_LuDocument_isHaveText_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_isHaveText
  #ifdef parent_isHaveText
    #define SOMGD_pmc_parent_isHaveText
    #undef parent_isHaveText
  #else
#define parent_isHaveText LuPopplerDocument_parent_LuDocument_isHaveText
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_isHaveText
  #ifdef parent_LuDocument_isHaveText
    #define SOMGD_pmc_parent_LuDocument_isHaveText
    #undef parent_LuDocument_isHaveText
  #else
    #define parent_LuDocument_isHaveText LuPopplerDocument_parent_LuDocument_isHaveText
  #endif
#endif
#define LuPopplerDocument_parents_isHaveText(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_isHaveText(somSelf,ev))

/*
 * Overridden method: getText
 */
SOM_Scope string  SOMLINK getText(LuPopplerDocument *somSelf, Environment *ev,
		long pagenum,
		LuRectangle* selection);
static char *somMN_LuPopplerDocumentgetText = "LuDocument::getText";
static somId somId_LuPopplerDocumentgetText = &somMN_LuPopplerDocumentgetText;
#ifdef somId_getText
#undef somId_getText
#else
#define somId_getText somId_LuPopplerDocumentgetText
#endif
typedef string   SOMLINK somTP_xih_LuPopplerDocument_getText(LuPopplerDocument *somSelf, Environment *ev, 
		long pagenum, 
		LuRectangle* selection);
typedef somTP_xih_LuPopplerDocument_getText *somTD_xih_LuPopplerDocument_getText;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_getText_resolved;
#define LuPopplerDocument_parent_LuDocument_getText(somSelf,ev,pagenum,selection) \
  ((( somTD_xih_LuPopplerDocument_getText ) \
      LuPopplerDocument_parent_LuDocument_getText_resolved) \
	(somSelf,ev,pagenum,selection))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getText
  #ifdef parent_getText
    #define SOMGD_pmc_parent_getText
    #undef parent_getText
  #else
#define parent_getText LuPopplerDocument_parent_LuDocument_getText
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getText
  #ifdef parent_LuDocument_getText
    #define SOMGD_pmc_parent_LuDocument_getText
    #undef parent_LuDocument_getText
  #else
    #define parent_LuDocument_getText LuPopplerDocument_parent_LuDocument_getText
  #endif
#endif
#define LuPopplerDocument_parents_getText(somSelf,ev,pagenum,selection) (\
   LuPopplerDocument_parent_LuDocument_getText(somSelf,ev,pagenum,selection))

/*
 * Overridden method: isHaveLinks
 */
SOM_Scope boolean  SOMLINK isHaveLinks(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentisHaveLinks = "LuDocument::isHaveLinks";
static somId somId_LuPopplerDocumentisHaveLinks = &somMN_LuPopplerDocumentisHaveLinks;
#ifdef somId_isHaveLinks
#undef somId_isHaveLinks
#else
#define somId_isHaveLinks somId_LuPopplerDocumentisHaveLinks
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_isHaveLinks(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_isHaveLinks *somTD_xih_LuPopplerDocument_isHaveLinks;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_isHaveLinks_resolved;
#define LuPopplerDocument_parent_LuDocument_isHaveLinks(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_isHaveLinks ) \
      LuPopplerDocument_parent_LuDocument_isHaveLinks_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_isHaveLinks
  #ifdef parent_isHaveLinks
    #define SOMGD_pmc_parent_isHaveLinks
    #undef parent_isHaveLinks
  #else
#define parent_isHaveLinks LuPopplerDocument_parent_LuDocument_isHaveLinks
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_isHaveLinks
  #ifdef parent_LuDocument_isHaveLinks
    #define SOMGD_pmc_parent_LuDocument_isHaveLinks
    #undef parent_LuDocument_isHaveLinks
  #else
    #define parent_LuDocument_isHaveLinks LuPopplerDocument_parent_LuDocument_isHaveLinks
  #endif
#endif
#define LuPopplerDocument_parents_isHaveLinks(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_isHaveLinks(somSelf,ev))

/*
 * Overridden method: getLinkMapping
 */
SOM_Scope LuDocument_LuLinkMapSequence*  SOMLINK getLinkMapping(LuPopplerDocument *somSelf, Environment *ev,
		long pagenum);
static char *somMN_LuPopplerDocumentgetLinkMapping = "LuDocument::getLinkMapping";
static somId somId_LuPopplerDocumentgetLinkMapping = &somMN_LuPopplerDocumentgetLinkMapping;
#ifdef somId_getLinkMapping
#undef somId_getLinkMapping
#else
#define somId_getLinkMapping somId_LuPopplerDocumentgetLinkMapping
#endif
typedef LuDocument_LuLinkMapSequence*   SOMLINK somTP_xih_LuPopplerDocument_getLinkMapping(LuPopplerDocument *somSelf, Environment *ev, 
		long pagenum);
typedef somTP_xih_LuPopplerDocument_getLinkMapping *somTD_xih_LuPopplerDocument_getLinkMapping;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_getLinkMapping_resolved;
#define LuPopplerDocument_parent_LuDocument_getLinkMapping(somSelf,ev,pagenum) \
  ((( somTD_xih_LuPopplerDocument_getLinkMapping ) \
      LuPopplerDocument_parent_LuDocument_getLinkMapping_resolved) \
	(somSelf,ev,pagenum))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getLinkMapping
  #ifdef parent_getLinkMapping
    #define SOMGD_pmc_parent_getLinkMapping
    #undef parent_getLinkMapping
  #else
#define parent_getLinkMapping LuPopplerDocument_parent_LuDocument_getLinkMapping
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getLinkMapping
  #ifdef parent_LuDocument_getLinkMapping
    #define SOMGD_pmc_parent_LuDocument_getLinkMapping
    #undef parent_LuDocument_getLinkMapping
  #else
    #define parent_LuDocument_getLinkMapping LuPopplerDocument_parent_LuDocument_getLinkMapping
  #endif
#endif
#define LuPopplerDocument_parents_getLinkMapping(somSelf,ev,pagenum) (\
   LuPopplerDocument_parent_LuDocument_getLinkMapping(somSelf,ev,pagenum))

/*
 * Overridden method: isSaveable
 */
SOM_Scope boolean  SOMLINK isSaveable(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentisSaveable = "LuDocument::isSaveable";
static somId somId_LuPopplerDocumentisSaveable = &somMN_LuPopplerDocumentisSaveable;
#ifdef somId_isSaveable
#undef somId_isSaveable
#else
#define somId_isSaveable somId_LuPopplerDocumentisSaveable
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_isSaveable(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_isSaveable *somTD_xih_LuPopplerDocument_isSaveable;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_isSaveable_resolved;
#define LuPopplerDocument_parent_LuDocument_isSaveable(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_isSaveable ) \
      LuPopplerDocument_parent_LuDocument_isSaveable_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_isSaveable
  #ifdef parent_isSaveable
    #define SOMGD_pmc_parent_isSaveable
    #undef parent_isSaveable
  #else
#define parent_isSaveable LuPopplerDocument_parent_LuDocument_isSaveable
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_isSaveable
  #ifdef parent_LuDocument_isSaveable
    #define SOMGD_pmc_parent_LuDocument_isSaveable
    #undef parent_LuDocument_isSaveable
  #else
    #define parent_LuDocument_isSaveable LuPopplerDocument_parent_LuDocument_isSaveable
  #endif
#endif
#define LuPopplerDocument_parents_isSaveable(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_isSaveable(somSelf,ev))

/*
 * Overridden method: saveAs
 */
SOM_Scope boolean  SOMLINK saveAs(LuPopplerDocument *somSelf, Environment *ev,
		string filename);
static char *somMN_LuPopplerDocumentsaveAs = "LuDocument::saveAs";
static somId somId_LuPopplerDocumentsaveAs = &somMN_LuPopplerDocumentsaveAs;
#ifdef somId_saveAs
#undef somId_saveAs
#else
#define somId_saveAs somId_LuPopplerDocumentsaveAs
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_saveAs(LuPopplerDocument *somSelf, Environment *ev, 
		string filename);
typedef somTP_xih_LuPopplerDocument_saveAs *somTD_xih_LuPopplerDocument_saveAs;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_saveAs_resolved;
#define LuPopplerDocument_parent_LuDocument_saveAs(somSelf,ev,filename) \
  ((( somTD_xih_LuPopplerDocument_saveAs ) \
      LuPopplerDocument_parent_LuDocument_saveAs_resolved) \
	(somSelf,ev,filename))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_saveAs
  #ifdef parent_saveAs
    #define SOMGD_pmc_parent_saveAs
    #undef parent_saveAs
  #else
#define parent_saveAs LuPopplerDocument_parent_LuDocument_saveAs
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_saveAs
  #ifdef parent_LuDocument_saveAs
    #define SOMGD_pmc_parent_LuDocument_saveAs
    #undef parent_LuDocument_saveAs
  #else
    #define parent_LuDocument_saveAs LuPopplerDocument_parent_LuDocument_saveAs
  #endif
#endif
#define LuPopplerDocument_parents_saveAs(somSelf,ev,filename) (\
   LuPopplerDocument_parent_LuDocument_saveAs(somSelf,ev,filename))

/*
 * Overridden method: isPSExportable
 */
SOM_Scope boolean  SOMLINK isPSExportable(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentisPSExportable = "LuDocument::isPSExportable";
static somId somId_LuPopplerDocumentisPSExportable = &somMN_LuPopplerDocumentisPSExportable;
#ifdef somId_isPSExportable
#undef somId_isPSExportable
#else
#define somId_isPSExportable somId_LuPopplerDocumentisPSExportable
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_isPSExportable(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_isPSExportable *somTD_xih_LuPopplerDocument_isPSExportable;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_isPSExportable_resolved;
#define LuPopplerDocument_parent_LuDocument_isPSExportable(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_isPSExportable ) \
      LuPopplerDocument_parent_LuDocument_isPSExportable_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_isPSExportable
  #ifdef parent_isPSExportable
    #define SOMGD_pmc_parent_isPSExportable
    #undef parent_isPSExportable
  #else
#define parent_isPSExportable LuPopplerDocument_parent_LuDocument_isPSExportable
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_isPSExportable
  #ifdef parent_LuDocument_isPSExportable
    #define SOMGD_pmc_parent_LuDocument_isPSExportable
    #undef parent_LuDocument_isPSExportable
  #else
    #define parent_LuDocument_isPSExportable LuPopplerDocument_parent_LuDocument_isPSExportable
  #endif
#endif
#define LuPopplerDocument_parents_isPSExportable(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_isPSExportable(somSelf,ev))

/*
 * Overridden method: exportToPS
 */
SOM_Scope void  SOMLINK exportToPS(LuPopplerDocument *somSelf, Environment *ev,
		string filename,
		long first_page,
		long last_page,
		double width,
		double height,
		boolean duplex);
static char *somMN_LuPopplerDocumentexportToPS = "LuDocument::exportToPS";
static somId somId_LuPopplerDocumentexportToPS = &somMN_LuPopplerDocumentexportToPS;
#ifdef somId_exportToPS
#undef somId_exportToPS
#else
#define somId_exportToPS somId_LuPopplerDocumentexportToPS
#endif
typedef void   SOMLINK somTP_xih_LuPopplerDocument_exportToPS(LuPopplerDocument *somSelf, Environment *ev, 
		string filename, 
		long first_page, 
		long last_page, 
		double width, 
		double height, 
		boolean duplex);
typedef somTP_xih_LuPopplerDocument_exportToPS *somTD_xih_LuPopplerDocument_exportToPS;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_exportToPS_resolved;
#define LuPopplerDocument_parent_LuDocument_exportToPS(somSelf,ev,filename,first_page,last_page,width,height,duplex) \
  ((( somTD_xih_LuPopplerDocument_exportToPS ) \
      LuPopplerDocument_parent_LuDocument_exportToPS_resolved) \
	(somSelf,ev,filename,first_page,last_page,width,height,duplex))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_exportToPS
  #ifdef parent_exportToPS
    #define SOMGD_pmc_parent_exportToPS
    #undef parent_exportToPS
  #else
#define parent_exportToPS LuPopplerDocument_parent_LuDocument_exportToPS
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_exportToPS
  #ifdef parent_LuDocument_exportToPS
    #define SOMGD_pmc_parent_LuDocument_exportToPS
    #undef parent_LuDocument_exportToPS
  #else
    #define parent_LuDocument_exportToPS LuPopplerDocument_parent_LuDocument_exportToPS
  #endif
#endif
#define LuPopplerDocument_parents_exportToPS(somSelf,ev,filename,first_page,last_page,width,height,duplex) (\
   LuPopplerDocument_parent_LuDocument_exportToPS(somSelf,ev,filename,first_page,last_page,width,height,duplex))

/*
 * Overridden method: isHaveFontInfo
 */
SOM_Scope boolean  SOMLINK isHaveFontInfo(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentisHaveFontInfo = "LuDocument::isHaveFontInfo";
static somId somId_LuPopplerDocumentisHaveFontInfo = &somMN_LuPopplerDocumentisHaveFontInfo;
#ifdef somId_isHaveFontInfo
#undef somId_isHaveFontInfo
#else
#define somId_isHaveFontInfo somId_LuPopplerDocumentisHaveFontInfo
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_isHaveFontInfo(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_isHaveFontInfo *somTD_xih_LuPopplerDocument_isHaveFontInfo;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_isHaveFontInfo_resolved;
#define LuPopplerDocument_parent_LuDocument_isHaveFontInfo(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_isHaveFontInfo ) \
      LuPopplerDocument_parent_LuDocument_isHaveFontInfo_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_isHaveFontInfo
  #ifdef parent_isHaveFontInfo
    #define SOMGD_pmc_parent_isHaveFontInfo
    #undef parent_isHaveFontInfo
  #else
#define parent_isHaveFontInfo LuPopplerDocument_parent_LuDocument_isHaveFontInfo
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_isHaveFontInfo
  #ifdef parent_LuDocument_isHaveFontInfo
    #define SOMGD_pmc_parent_LuDocument_isHaveFontInfo
    #undef parent_LuDocument_isHaveFontInfo
  #else
    #define parent_LuDocument_isHaveFontInfo LuPopplerDocument_parent_LuDocument_isHaveFontInfo
  #endif
#endif
#define LuPopplerDocument_parents_isHaveFontInfo(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_isHaveFontInfo(somSelf,ev))

/*
 * Overridden method: getFontInfo
 */
SOM_Scope LuDocument_LuFontInfoSequence*  SOMLINK getFontInfo(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentgetFontInfo = "LuDocument::getFontInfo";
static somId somId_LuPopplerDocumentgetFontInfo = &somMN_LuPopplerDocumentgetFontInfo;
#ifdef somId_getFontInfo
#undef somId_getFontInfo
#else
#define somId_getFontInfo somId_LuPopplerDocumentgetFontInfo
#endif
typedef LuDocument_LuFontInfoSequence*   SOMLINK somTP_xih_LuPopplerDocument_getFontInfo(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_getFontInfo *somTD_xih_LuPopplerDocument_getFontInfo;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_getFontInfo_resolved;
#define LuPopplerDocument_parent_LuDocument_getFontInfo(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_getFontInfo ) \
      LuPopplerDocument_parent_LuDocument_getFontInfo_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getFontInfo
  #ifdef parent_getFontInfo
    #define SOMGD_pmc_parent_getFontInfo
    #undef parent_getFontInfo
  #else
#define parent_getFontInfo LuPopplerDocument_parent_LuDocument_getFontInfo
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getFontInfo
  #ifdef parent_LuDocument_getFontInfo
    #define SOMGD_pmc_parent_LuDocument_getFontInfo
    #undef parent_LuDocument_getFontInfo
  #else
    #define parent_LuDocument_getFontInfo LuPopplerDocument_parent_LuDocument_getFontInfo
  #endif
#endif
#define LuPopplerDocument_parents_getFontInfo(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_getFontInfo(somSelf,ev))

/*
 * Overridden method: isHaveIndex
 */
SOM_Scope boolean  SOMLINK isHaveIndex(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentisHaveIndex = "LuDocument::isHaveIndex";
static somId somId_LuPopplerDocumentisHaveIndex = &somMN_LuPopplerDocumentisHaveIndex;
#ifdef somId_isHaveIndex
#undef somId_isHaveIndex
#else
#define somId_isHaveIndex somId_LuPopplerDocumentisHaveIndex
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_isHaveIndex(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_isHaveIndex *somTD_xih_LuPopplerDocument_isHaveIndex;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_isHaveIndex_resolved;
#define LuPopplerDocument_parent_LuDocument_isHaveIndex(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_isHaveIndex ) \
      LuPopplerDocument_parent_LuDocument_isHaveIndex_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_isHaveIndex
  #ifdef parent_isHaveIndex
    #define SOMGD_pmc_parent_isHaveIndex
    #undef parent_isHaveIndex
  #else
#define parent_isHaveIndex LuPopplerDocument_parent_LuDocument_isHaveIndex
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_isHaveIndex
  #ifdef parent_LuDocument_isHaveIndex
    #define SOMGD_pmc_parent_LuDocument_isHaveIndex
    #undef parent_LuDocument_isHaveIndex
  #else
    #define parent_LuDocument_isHaveIndex LuPopplerDocument_parent_LuDocument_isHaveIndex
  #endif
#endif
#define LuPopplerDocument_parents_isHaveIndex(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_isHaveIndex(somSelf,ev))

/*
 * Overridden method: getIndex
 */
SOM_Scope LuIndexNode*  SOMLINK getIndex(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentgetIndex = "LuDocument::getIndex";
static somId somId_LuPopplerDocumentgetIndex = &somMN_LuPopplerDocumentgetIndex;
#ifdef somId_getIndex
#undef somId_getIndex
#else
#define somId_getIndex somId_LuPopplerDocumentgetIndex
#endif
typedef LuIndexNode*   SOMLINK somTP_xih_LuPopplerDocument_getIndex(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_getIndex *somTD_xih_LuPopplerDocument_getIndex;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_getIndex_resolved;
#define LuPopplerDocument_parent_LuDocument_getIndex(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_getIndex ) \
      LuPopplerDocument_parent_LuDocument_getIndex_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getIndex
  #ifdef parent_getIndex
    #define SOMGD_pmc_parent_getIndex
    #undef parent_getIndex
  #else
#define parent_getIndex LuPopplerDocument_parent_LuDocument_getIndex
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getIndex
  #ifdef parent_LuDocument_getIndex
    #define SOMGD_pmc_parent_LuDocument_getIndex
    #undef parent_LuDocument_getIndex
  #else
    #define parent_LuDocument_getIndex LuPopplerDocument_parent_LuDocument_getIndex
  #endif
#endif
#define LuPopplerDocument_parents_getIndex(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_getIndex(somSelf,ev))

/*
 * Overridden method: getDocumentInfo
 */
SOM_Scope LuDocumentInfo*  SOMLINK getDocumentInfo(LuPopplerDocument *somSelf, Environment *ev);
static char *somMN_LuPopplerDocumentgetDocumentInfo = "LuDocument::getDocumentInfo";
static somId somId_LuPopplerDocumentgetDocumentInfo = &somMN_LuPopplerDocumentgetDocumentInfo;
#ifdef somId_getDocumentInfo
#undef somId_getDocumentInfo
#else
#define somId_getDocumentInfo somId_LuPopplerDocumentgetDocumentInfo
#endif
typedef LuDocumentInfo*   SOMLINK somTP_xih_LuPopplerDocument_getDocumentInfo(LuPopplerDocument *somSelf, Environment *ev);
typedef somTP_xih_LuPopplerDocument_getDocumentInfo *somTD_xih_LuPopplerDocument_getDocumentInfo;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_getDocumentInfo_resolved;
#define LuPopplerDocument_parent_LuDocument_getDocumentInfo(somSelf,ev) \
  ((( somTD_xih_LuPopplerDocument_getDocumentInfo ) \
      LuPopplerDocument_parent_LuDocument_getDocumentInfo_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getDocumentInfo
  #ifdef parent_getDocumentInfo
    #define SOMGD_pmc_parent_getDocumentInfo
    #undef parent_getDocumentInfo
  #else
#define parent_getDocumentInfo LuPopplerDocument_parent_LuDocument_getDocumentInfo
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getDocumentInfo
  #ifdef parent_LuDocument_getDocumentInfo
    #define SOMGD_pmc_parent_LuDocument_getDocumentInfo
    #undef parent_LuDocument_getDocumentInfo
  #else
    #define parent_LuDocument_getDocumentInfo LuPopplerDocument_parent_LuDocument_getDocumentInfo
  #endif
#endif
#define LuPopplerDocument_parents_getDocumentInfo(somSelf,ev) (\
   LuPopplerDocument_parent_LuDocument_getDocumentInfo(somSelf,ev))

/*
 * Overridden method: getThumbnailSize
 */
SOM_Scope boolean  SOMLINK getThumbnailSize(LuPopplerDocument *somSelf, Environment *ev,
		long pagenum,
		short suggested_width,
		short* width,
		short* height);
static char *somMN_LuPopplerDocumentgetThumbnailSize = "LuDocument::getThumbnailSize";
static somId somId_LuPopplerDocumentgetThumbnailSize = &somMN_LuPopplerDocumentgetThumbnailSize;
#ifdef somId_getThumbnailSize
#undef somId_getThumbnailSize
#else
#define somId_getThumbnailSize somId_LuPopplerDocumentgetThumbnailSize
#endif
typedef boolean   SOMLINK somTP_xih_LuPopplerDocument_getThumbnailSize(LuPopplerDocument *somSelf, Environment *ev, 
		long pagenum, 
		short suggested_width, 
		short* width, 
		short* height);
typedef somTP_xih_LuPopplerDocument_getThumbnailSize *somTD_xih_LuPopplerDocument_getThumbnailSize;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_getThumbnailSize_resolved;
#define LuPopplerDocument_parent_LuDocument_getThumbnailSize(somSelf,ev,pagenum,suggested_width,width,height) \
  ((( somTD_xih_LuPopplerDocument_getThumbnailSize ) \
      LuPopplerDocument_parent_LuDocument_getThumbnailSize_resolved) \
	(somSelf,ev,pagenum,suggested_width,width,height))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getThumbnailSize
  #ifdef parent_getThumbnailSize
    #define SOMGD_pmc_parent_getThumbnailSize
    #undef parent_getThumbnailSize
  #else
#define parent_getThumbnailSize LuPopplerDocument_parent_LuDocument_getThumbnailSize
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getThumbnailSize
  #ifdef parent_LuDocument_getThumbnailSize
    #define SOMGD_pmc_parent_LuDocument_getThumbnailSize
    #undef parent_LuDocument_getThumbnailSize
  #else
    #define parent_LuDocument_getThumbnailSize LuPopplerDocument_parent_LuDocument_getThumbnailSize
  #endif
#endif
#define LuPopplerDocument_parents_getThumbnailSize(somSelf,ev,pagenum,suggested_width,width,height) (\
   LuPopplerDocument_parent_LuDocument_getThumbnailSize(somSelf,ev,pagenum,suggested_width,width,height))

/*
 * Overridden method: getThumbnail
 */
SOM_Scope LuPixbuf*  SOMLINK getThumbnail(LuPopplerDocument *somSelf, Environment *ev,
		long pagenum,
		short suggested_width);
static char *somMN_LuPopplerDocumentgetThumbnail = "LuDocument::getThumbnail";
static somId somId_LuPopplerDocumentgetThumbnail = &somMN_LuPopplerDocumentgetThumbnail;
#ifdef somId_getThumbnail
#undef somId_getThumbnail
#else
#define somId_getThumbnail somId_LuPopplerDocumentgetThumbnail
#endif
typedef LuPixbuf*   SOMLINK somTP_xih_LuPopplerDocument_getThumbnail(LuPopplerDocument *somSelf, Environment *ev, 
		long pagenum, 
		short suggested_width);
typedef somTP_xih_LuPopplerDocument_getThumbnail *somTD_xih_LuPopplerDocument_getThumbnail;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_getThumbnail_resolved;
#define LuPopplerDocument_parent_LuDocument_getThumbnail(somSelf,ev,pagenum,suggested_width) \
  ((( somTD_xih_LuPopplerDocument_getThumbnail ) \
      LuPopplerDocument_parent_LuDocument_getThumbnail_resolved) \
	(somSelf,ev,pagenum,suggested_width))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getThumbnail
  #ifdef parent_getThumbnail
    #define SOMGD_pmc_parent_getThumbnail
    #undef parent_getThumbnail
  #else
#define parent_getThumbnail LuPopplerDocument_parent_LuDocument_getThumbnail
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getThumbnail
  #ifdef parent_LuDocument_getThumbnail
    #define SOMGD_pmc_parent_LuDocument_getThumbnail
    #undef parent_LuDocument_getThumbnail
  #else
    #define parent_LuDocument_getThumbnail LuPopplerDocument_parent_LuDocument_getThumbnail
  #endif
#endif
#define LuPopplerDocument_parents_getThumbnail(somSelf,ev,pagenum,suggested_width) (\
   LuPopplerDocument_parent_LuDocument_getThumbnail(somSelf,ev,pagenum,suggested_width))

/*
 * Overridden method: searchText
 */
SOM_Scope LuDocument_LuRectSequence*  SOMLINK searchText(LuPopplerDocument *somSelf, Environment *ev,
		long pagenum,
		string text,
		boolean caseSensitive);
static char *somMN_LuPopplerDocumentsearchText = "LuDocument::searchText";
static somId somId_LuPopplerDocumentsearchText = &somMN_LuPopplerDocumentsearchText;
#ifdef somId_searchText
#undef somId_searchText
#else
#define somId_searchText somId_LuPopplerDocumentsearchText
#endif
typedef LuDocument_LuRectSequence*   SOMLINK somTP_xih_LuPopplerDocument_searchText(LuPopplerDocument *somSelf, Environment *ev, 
		long pagenum, 
		string text, 
		boolean caseSensitive);
typedef somTP_xih_LuPopplerDocument_searchText *somTD_xih_LuPopplerDocument_searchText;
/* define the parent method call macro */
static somMethodProc* LuPopplerDocument_parent_LuDocument_searchText_resolved;
#define LuPopplerDocument_parent_LuDocument_searchText(somSelf,ev,pagenum,text,caseSensitive) \
  ((( somTD_xih_LuPopplerDocument_searchText ) \
      LuPopplerDocument_parent_LuDocument_searchText_resolved) \
	(somSelf,ev,pagenum,text,caseSensitive))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_searchText
  #ifdef parent_searchText
    #define SOMGD_pmc_parent_searchText
    #undef parent_searchText
  #else
#define parent_searchText LuPopplerDocument_parent_LuDocument_searchText
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_searchText
  #ifdef parent_LuDocument_searchText
    #define SOMGD_pmc_parent_LuDocument_searchText
    #undef parent_LuDocument_searchText
  #else
    #define parent_LuDocument_searchText LuPopplerDocument_parent_LuDocument_searchText
  #endif
#endif
#define LuPopplerDocument_parents_searchText(somSelf,ev,pagenum,text,caseSensitive) (\
   LuPopplerDocument_parent_LuDocument_searchText(somSelf,ev,pagenum,text,caseSensitive))

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK somDefaultInit(LuPopplerDocument *somSelf,
		som3InitCtrl* ctrl);
static char *somMN_LuPopplerDocumentsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_LuPopplerDocumentsomDefaultInit = &somMN_LuPopplerDocumentsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_LuPopplerDocumentsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK somDestruct(LuPopplerDocument *somSelf,
		octet doFree,
		som3DestructCtrl* ctrl);
static char *somMN_LuPopplerDocumentsomDestruct = "SOMObject::somDestruct";
static somId somId_LuPopplerDocumentsomDestruct = &somMN_LuPopplerDocumentsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_LuPopplerDocumentsomDestruct
#endif

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t LuPopplerDocumentOM[] = {
    {    &somId_LuPopplerDocumentloadFile,
         (somMethodProc *) loadFile  },
    {    &somId_LuPopplerDocumentisScalable,
         (somMethodProc *) isScalable  },
    {    &somId_LuPopplerDocumentisRotable,
         (somMethodProc *) isRotable  },
    {    &somId_LuPopplerDocumentgetPageCount,
         (somMethodProc *) getPageCount  },
    {    &somId_LuPopplerDocumentgetPageSize,
         (somMethodProc *) getPageSize  },
    {    &somId_LuPopplerDocumentrenderPageToPixbuf,
         (somMethodProc *) renderPageToPixbuf  },
    {    &somId_LuPopplerDocumentisAsynchRenderingSupported,
         (somMethodProc *) isAsynchRenderingSupported  },
    {    &somId_LuPopplerDocumentrenderPageToPixbufAsynch,
         (somMethodProc *) renderPageToPixbufAsynch  },
    {    &somId_LuPopplerDocumentgetSelectionRectangles,
         (somMethodProc *) getSelectionRectangles  },
    {    &somId_LuPopplerDocumentisHaveText,
         (somMethodProc *) isHaveText  },
    {    &somId_LuPopplerDocumentgetText,
         (somMethodProc *) getText  },
    {    &somId_LuPopplerDocumentisHaveLinks,
         (somMethodProc *) isHaveLinks  },
    {    &somId_LuPopplerDocumentgetLinkMapping,
         (somMethodProc *) getLinkMapping  },
    {    &somId_LuPopplerDocumentisSaveable,
         (somMethodProc *) isSaveable  },
    {    &somId_LuPopplerDocumentsaveAs,
         (somMethodProc *) saveAs  },
    {    &somId_LuPopplerDocumentisPSExportable,
         (somMethodProc *) isPSExportable  },
    {    &somId_LuPopplerDocumentexportToPS,
         (somMethodProc *) exportToPS  },
    {    &somId_LuPopplerDocumentisHaveFontInfo,
         (somMethodProc *) isHaveFontInfo  },
    {    &somId_LuPopplerDocumentgetFontInfo,
         (somMethodProc *) getFontInfo  },
    {    &somId_LuPopplerDocumentisHaveIndex,
         (somMethodProc *) isHaveIndex  },
    {    &somId_LuPopplerDocumentgetIndex,
         (somMethodProc *) getIndex  },
    {    &somId_LuPopplerDocumentgetDocumentInfo,
         (somMethodProc *) getDocumentInfo  },
    {    &somId_LuPopplerDocumentgetThumbnailSize,
         (somMethodProc *) getThumbnailSize  },
    {    &somId_LuPopplerDocumentgetThumbnail,
         (somMethodProc *) getThumbnail  },
    {    &somId_LuPopplerDocumentsearchText,
         (somMethodProc *) searchText  },
    {    &somId_LuPopplerDocumentsomDefaultInit,
         (somMethodProc *) somDefaultInit  },
    {    &somId_LuPopplerDocumentsomDestruct,
         (somMethodProc *) somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_LuPopplerDocument = "LuPopplerDocument";
static char * somPCN_LuPopplerDocument_LuDocument = "LuDocument";

static somId somPCLuPopplerDocument[] = {
    &somPCN_LuPopplerDocument_LuDocument,
};

static somStaticClassInfo LuPopplerDocumentSCI = {
    4, 0, 27, 0, 0, 0, /* layout version 4 */ 
    LuPopplerDocument_MajorVersion, LuPopplerDocument_MinorVersion,
    sizeof(LuPopplerDocumentData), LuPopplerDocument_MaxNoMethods, 1,
    &somCN_LuPopplerDocument,
    (somId) NULL, 1,
    somPCLuPopplerDocument,
    (somClassDataStructure *) &LuPopplerDocumentClassData,
    (somCClassDataStructure *) &LuPopplerDocumentCClassData,
    (somStaticMethod_t *) NULL, LuPopplerDocumentOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK LuPopplerDocumentNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_LuPopplerDocument && _LuPopplerDocument->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_LuPopplerDocument));
    LuDocumentNewClass(LuDocument_MajorVersion,LuDocument_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&LuPopplerDocumentSCI, somtmajorVersion, somtminorVersion));
    LuPopplerDocument_parent_LuDocument_searchText_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.searchText);
    LuPopplerDocument_parent_LuDocument_getThumbnail_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.getThumbnail);
    LuPopplerDocument_parent_LuDocument_getThumbnailSize_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.getThumbnailSize);
    LuPopplerDocument_parent_LuDocument_getDocumentInfo_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.getDocumentInfo);
    LuPopplerDocument_parent_LuDocument_getIndex_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.getIndex);
    LuPopplerDocument_parent_LuDocument_isHaveIndex_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.isHaveIndex);
    LuPopplerDocument_parent_LuDocument_getFontInfo_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.getFontInfo);
    LuPopplerDocument_parent_LuDocument_isHaveFontInfo_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.isHaveFontInfo);
    LuPopplerDocument_parent_LuDocument_exportToPS_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.exportToPS);
    LuPopplerDocument_parent_LuDocument_isPSExportable_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.isPSExportable);
    LuPopplerDocument_parent_LuDocument_saveAs_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.saveAs);
    LuPopplerDocument_parent_LuDocument_isSaveable_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.isSaveable);
    LuPopplerDocument_parent_LuDocument_getLinkMapping_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.getLinkMapping);
    LuPopplerDocument_parent_LuDocument_isHaveLinks_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.isHaveLinks);
    LuPopplerDocument_parent_LuDocument_getText_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.getText);
    LuPopplerDocument_parent_LuDocument_isHaveText_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.isHaveText);
    LuPopplerDocument_parent_LuDocument_getSelectionRectangles_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.getSelectionRectangles);
    LuPopplerDocument_parent_LuDocument_renderPageToPixbufAsynch_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.renderPageToPixbufAsynch);
    LuPopplerDocument_parent_LuDocument_isAsynchRenderingSupported_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.isAsynchRenderingSupported);
    LuPopplerDocument_parent_LuDocument_renderPageToPixbuf_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.renderPageToPixbuf);
    LuPopplerDocument_parent_LuDocument_getPageSize_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.getPageSize);
    LuPopplerDocument_parent_LuDocument_getPageCount_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.getPageCount);
    LuPopplerDocument_parent_LuDocument_isRotable_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.isRotable);
    LuPopplerDocument_parent_LuDocument_isScalable_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.isScalable);
    LuPopplerDocument_parent_LuDocument_loadFile_resolved = 
	somParentNumResolve(LuPopplerDocumentCClassData.parentMtab, 1, LuDocumentClassData.loadFile);
    return result;
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */
#define LuPopplerDocument_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)LuPopplerDocumentCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (LuPopplerDocumentData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define LuPopplerDocument_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)LuPopplerDocumentCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (LuPopplerDocumentData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define LuPopplerDocument_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   LuPopplerDocument_DeInit_LuDocument_somDestruct(somSelf,0,ctrl); \
   if (doFree) _LuPopplerDocument->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for LuDocument */
#define LuPopplerDocument_Init_LuDocument_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDefaultInit) \
               ctrl->info->defaultInit) \
                   ((SOMObject *)((void *) somSelf), ctrl)
#define LuPopplerDocument_DeInit_LuDocument_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDestruct) \
               ctrl->info->defaultDestruct) \
                   ((SOMObject *)((void *) somSelf), 0, ctrl)

#endif /* Primary Implementation Support */

#endif       /* SOM_LuPopplerDocument_xih */
