
/*
 * This file was generated by the SOM Compiler.
 * FileName: ludjvu.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_LuDjvuDocument_xh
#define SOM_LuDjvuDocument_xh

class LuDjvuDocument;

#define LuDjvuDocument_MajorVersion 0
#define LuDjvuDocument_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_LuDocument_xh
#include <ludoc.xh>
#endif

#ifndef LuDjvuDocument_API
#define LuDjvuDocument_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the LuDjvuDocument Class */
SOMEXTERN SOMClass * SOMLINK LuDjvuDocumentNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the LuDjvuDocument class object, and the methods it introduces. */
SOMEXTERN struct LuDjvuDocumentClassDataStructure {
	SOMClass *classObject;
} SOMDLINK LuDjvuDocumentClassData;
#define _LuDjvuDocument LuDjvuDocumentClassData.classObject

/* The API to parentMtabs for LuDjvuDocument, and the instance data it introduces. */
SOMEXTERN struct LuDjvuDocumentCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK LuDjvuDocumentCClassData;

/*
 * -- Typedefs for LuDjvuDocument Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_LuDjvuDocument_loadFile(LuDjvuDocument *somSelf, Environment *ev, 
		string filename, 
		string password, 
		string* error);
typedef somTP_LuDjvuDocument_loadFile *somTD_LuDjvuDocument_loadFile;
typedef short   SOMLINK somTP_LuDjvuDocument_getBpp(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_getBpp *somTD_LuDjvuDocument_getBpp;
typedef boolean   SOMLINK somTP_LuDjvuDocument_isScalable(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_isScalable *somTD_LuDjvuDocument_isScalable;
typedef boolean   SOMLINK somTP_LuDjvuDocument_isRotable(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_isRotable *somTD_LuDjvuDocument_isRotable;
typedef long   SOMLINK somTP_LuDjvuDocument_getPageCount(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_getPageCount *somTD_LuDjvuDocument_getPageCount;
typedef void   SOMLINK somTP_LuDjvuDocument_getPageSize(LuDjvuDocument *somSelf, Environment *ev, 
		long pagenum, 
		double* width, 
		double* height);
typedef somTP_LuDjvuDocument_getPageSize *somTD_LuDjvuDocument_getPageSize;
typedef void   SOMLINK somTP_LuDjvuDocument_renderPageToPixbuf(LuDjvuDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf);
typedef somTP_LuDjvuDocument_renderPageToPixbuf *somTD_LuDjvuDocument_renderPageToPixbuf;
typedef boolean   SOMLINK somTP_LuDjvuDocument_isAsynchRenderingSupported(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_isAsynchRenderingSupported *somTD_LuDjvuDocument_isAsynchRenderingSupported;
typedef void   SOMLINK somTP_LuDjvuDocument_renderPageToPixbufAsynch(LuDjvuDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf, 
		LuDocument_asynchCallbackFn fnd, 
		LuDocument_asynchCallbackFn fna, 
		somToken fndata);
typedef somTP_LuDjvuDocument_renderPageToPixbufAsynch *somTD_LuDjvuDocument_renderPageToPixbufAsynch;
typedef boolean   SOMLINK somTP_LuDjvuDocument_isRenderIntoPS(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_isRenderIntoPS *somTD_LuDjvuDocument_isRenderIntoPS;
typedef void   SOMLINK somTP_LuDjvuDocument_renderPageToPS(LuDjvuDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		unsigned long hps, 
		somMToken rect);
typedef somTP_LuDjvuDocument_renderPageToPS *somTD_LuDjvuDocument_renderPageToPS;
typedef boolean   SOMLINK somTP_LuDjvuDocument_isHaveText(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_isHaveText *somTD_LuDjvuDocument_isHaveText;
typedef LuDocument_LuRectSequence*   SOMLINK somTP_LuDjvuDocument_getSelectionRectangles(LuDjvuDocument *somSelf, Environment *ev, 
		long pagenum, 
		LuRectangle* selection);
typedef somTP_LuDjvuDocument_getSelectionRectangles *somTD_LuDjvuDocument_getSelectionRectangles;
typedef void   SOMLINK somTP_LuDjvuDocument_freeRectangles(Environment *ev, 
		LuDocument_LuRectSequence* rectangles);
typedef somTP_LuDjvuDocument_freeRectangles *somTD_LuDjvuDocument_freeRectangles;
typedef string   SOMLINK somTP_LuDjvuDocument_getText(LuDjvuDocument *somSelf, Environment *ev, 
		long pagenum, 
		LuRectangle* selection);
typedef somTP_LuDjvuDocument_getText *somTD_LuDjvuDocument_getText;
typedef boolean   SOMLINK somTP_LuDjvuDocument_isHaveLinks(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_isHaveLinks *somTD_LuDjvuDocument_isHaveLinks;
typedef LuDocument_LuLinkMapSequence*   SOMLINK somTP_LuDjvuDocument_getLinkMapping(LuDjvuDocument *somSelf, Environment *ev, 
		long pagenum);
typedef somTP_LuDjvuDocument_getLinkMapping *somTD_LuDjvuDocument_getLinkMapping;
typedef void   SOMLINK somTP_LuDjvuDocument_freeLinkMapping(Environment *ev, 
		LuDocument_LuLinkMapSequence* mapping);
typedef somTP_LuDjvuDocument_freeLinkMapping *somTD_LuDjvuDocument_freeLinkMapping;
typedef boolean   SOMLINK somTP_LuDjvuDocument_isSaveable(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_isSaveable *somTD_LuDjvuDocument_isSaveable;
typedef boolean   SOMLINK somTP_LuDjvuDocument_saveAs(LuDjvuDocument *somSelf, Environment *ev, 
		string filename);
typedef somTP_LuDjvuDocument_saveAs *somTD_LuDjvuDocument_saveAs;
typedef boolean   SOMLINK somTP_LuDjvuDocument_isPostScriptExportable(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_isPostScriptExportable *somTD_LuDjvuDocument_isPostScriptExportable;
typedef void   SOMLINK somTP_LuDjvuDocument_exportToPostScript(LuDjvuDocument *somSelf, Environment *ev, 
		string filename, 
		long first_page, 
		long last_page, 
		double width, 
		double height, 
		boolean duplex);
typedef somTP_LuDjvuDocument_exportToPostScript *somTD_LuDjvuDocument_exportToPostScript;
typedef boolean   SOMLINK somTP_LuDjvuDocument_isHaveFontInfo(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_isHaveFontInfo *somTD_LuDjvuDocument_isHaveFontInfo;
typedef LuDocument_LuFontInfoSequence*   SOMLINK somTP_LuDjvuDocument_getFontInfo(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_getFontInfo *somTD_LuDjvuDocument_getFontInfo;
typedef void   SOMLINK somTP_LuDjvuDocument_freeFontInfo(Environment *ev, 
		LuDocument_LuFontInfoSequence* fonts);
typedef somTP_LuDjvuDocument_freeFontInfo *somTD_LuDjvuDocument_freeFontInfo;
typedef boolean   SOMLINK somTP_LuDjvuDocument_isHaveIndex(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_isHaveIndex *somTD_LuDjvuDocument_isHaveIndex;
typedef LuIndexNode*   SOMLINK somTP_LuDjvuDocument_getIndex(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_getIndex *somTD_LuDjvuDocument_getIndex;
typedef LuDocumentInfo*   SOMLINK somTP_LuDjvuDocument_getDocumentInfo(LuDjvuDocument *somSelf, Environment *ev);
typedef somTP_LuDjvuDocument_getDocumentInfo *somTD_LuDjvuDocument_getDocumentInfo;
typedef void   SOMLINK somTP_LuDjvuDocument_freeDocumentInfo(Environment *ev, 
		LuDocumentInfo* info);
typedef somTP_LuDjvuDocument_freeDocumentInfo *somTD_LuDjvuDocument_freeDocumentInfo;
typedef boolean   SOMLINK somTP_LuDjvuDocument_getThumbnailSize(LuDjvuDocument *somSelf, Environment *ev, 
		long pagenum, 
		short suggested_width, 
		short* width, 
		short* height);
typedef somTP_LuDjvuDocument_getThumbnailSize *somTD_LuDjvuDocument_getThumbnailSize;
typedef LuPixbuf*   SOMLINK somTP_LuDjvuDocument_getThumbnail(LuDjvuDocument *somSelf, Environment *ev, 
		long pagenum, 
		short suggested_width);
typedef somTP_LuDjvuDocument_getThumbnail *somTD_LuDjvuDocument_getThumbnail;
typedef LuDocument_LuRectSequence*   SOMLINK somTP_LuDjvuDocument_searchText(LuDjvuDocument *somSelf, Environment *ev, 
		long pagenum, 
		string text, 
		boolean caseSensitive);
typedef somTP_LuDjvuDocument_searchText *somTD_LuDjvuDocument_searchText;
typedef void   SOMLINK somTP_LuDjvuDocument_somDefaultInit(LuDjvuDocument *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_LuDjvuDocument_somDefaultInit *somTD_LuDjvuDocument_somDefaultInit;
typedef void   SOMLINK somTP_LuDjvuDocument_somDestruct(LuDjvuDocument *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_LuDjvuDocument_somDestruct *somTD_LuDjvuDocument_somDestruct;
typedef void   SOMLINK somTP_LuDjvuDocument_somDefaultCopyInit(LuDjvuDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDjvuDocument_somDefaultCopyInit *somTD_LuDjvuDocument_somDefaultCopyInit;
typedef LuDjvuDocument*   SOMLINK somTP_LuDjvuDocument_somDefaultAssign(LuDjvuDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDjvuDocument_somDefaultAssign *somTD_LuDjvuDocument_somDefaultAssign;
typedef void   SOMLINK somTP_LuDjvuDocument_somDefaultConstCopyInit(LuDjvuDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDjvuDocument_somDefaultConstCopyInit *somTD_LuDjvuDocument_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_LuDjvuDocument_somDefaultVCopyInit(LuDjvuDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDjvuDocument_somDefaultVCopyInit *somTD_LuDjvuDocument_somDefaultVCopyInit;
typedef void   SOMLINK somTP_LuDjvuDocument_somDefaultConstVCopyInit(LuDjvuDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDjvuDocument_somDefaultConstVCopyInit *somTD_LuDjvuDocument_somDefaultConstVCopyInit;
typedef LuDjvuDocument*   SOMLINK somTP_LuDjvuDocument_somDefaultConstAssign(LuDjvuDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDjvuDocument_somDefaultConstAssign *somTD_LuDjvuDocument_somDefaultConstAssign;
typedef LuDjvuDocument*   SOMLINK somTP_LuDjvuDocument_somDefaultVAssign(LuDjvuDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDjvuDocument_somDefaultVAssign *somTD_LuDjvuDocument_somDefaultVAssign;
typedef LuDjvuDocument*   SOMLINK somTP_LuDjvuDocument_somDefaultConstVAssign(LuDjvuDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDjvuDocument_somDefaultConstVAssign *somTD_LuDjvuDocument_somDefaultConstVAssign;
typedef void   SOMLINK somTP_LuDjvuDocument_somInit(LuDjvuDocument *somSelf);
typedef somTP_LuDjvuDocument_somInit *somTD_LuDjvuDocument_somInit;
typedef void   SOMLINK somTP_LuDjvuDocument_somFree(LuDjvuDocument *somSelf);
typedef somTP_LuDjvuDocument_somFree *somTD_LuDjvuDocument_somFree;
typedef void   SOMLINK somTP_LuDjvuDocument_somUninit(LuDjvuDocument *somSelf);
typedef somTP_LuDjvuDocument_somUninit *somTD_LuDjvuDocument_somUninit;
typedef SOMClass*   SOMLINK somTP_LuDjvuDocument_somGetClass(LuDjvuDocument *somSelf);
typedef somTP_LuDjvuDocument_somGetClass *somTD_LuDjvuDocument_somGetClass;
typedef string   SOMLINK somTP_LuDjvuDocument_somGetClassName(LuDjvuDocument *somSelf);
typedef somTP_LuDjvuDocument_somGetClassName *somTD_LuDjvuDocument_somGetClassName;
typedef long   SOMLINK somTP_LuDjvuDocument_somGetSize(LuDjvuDocument *somSelf);
typedef somTP_LuDjvuDocument_somGetSize *somTD_LuDjvuDocument_somGetSize;
typedef boolean   SOMLINK somTP_LuDjvuDocument_somIsA(LuDjvuDocument *somSelf, 
		SOMClass* aClassObj);
typedef somTP_LuDjvuDocument_somIsA *somTD_LuDjvuDocument_somIsA;
typedef boolean   SOMLINK somTP_LuDjvuDocument_somIsInstanceOf(LuDjvuDocument *somSelf, 
		SOMClass* aClassObj);
typedef somTP_LuDjvuDocument_somIsInstanceOf *somTD_LuDjvuDocument_somIsInstanceOf;
typedef boolean   SOMLINK somTP_LuDjvuDocument_somRespondsTo(LuDjvuDocument *somSelf, 
		somId mId);
typedef somTP_LuDjvuDocument_somRespondsTo *somTD_LuDjvuDocument_somRespondsTo;
typedef boolean   SOMLINK somTP_LuDjvuDocument_somDispatch(LuDjvuDocument *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_LuDjvuDocument_somDispatch *somTD_LuDjvuDocument_somDispatch;
typedef boolean   SOMLINK somTP_LuDjvuDocument_somClassDispatch(LuDjvuDocument *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_LuDjvuDocument_somClassDispatch *somTD_LuDjvuDocument_somClassDispatch;
typedef boolean   SOMLINK somTP_LuDjvuDocument_somCastObj(LuDjvuDocument *somSelf, 
		SOMClass* cls);
typedef somTP_LuDjvuDocument_somCastObj *somTD_LuDjvuDocument_somCastObj;
typedef boolean   SOMLINK somTP_LuDjvuDocument_somResetObj(LuDjvuDocument *somSelf);
typedef somTP_LuDjvuDocument_somResetObj *somTD_LuDjvuDocument_somResetObj;
typedef void   SOMLINK somTP_LuDjvuDocument_somDispatchV(LuDjvuDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuDjvuDocument_somDispatchV *somTD_LuDjvuDocument_somDispatchV;
typedef long   SOMLINK somTP_LuDjvuDocument_somDispatchL(LuDjvuDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuDjvuDocument_somDispatchL *somTD_LuDjvuDocument_somDispatchL;
typedef void*   SOMLINK somTP_LuDjvuDocument_somDispatchA(LuDjvuDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuDjvuDocument_somDispatchA *somTD_LuDjvuDocument_somDispatchA;
typedef double   SOMLINK somTP_LuDjvuDocument_somDispatchD(LuDjvuDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuDjvuDocument_somDispatchD *somTD_LuDjvuDocument_somDispatchD;
typedef SOMObject*   SOMLINK somTP_LuDjvuDocument_somPrintSelf(LuDjvuDocument *somSelf);
typedef somTP_LuDjvuDocument_somPrintSelf *somTD_LuDjvuDocument_somPrintSelf;
typedef void   SOMLINK somTP_LuDjvuDocument_somDumpSelf(LuDjvuDocument *somSelf, 
		long level);
typedef somTP_LuDjvuDocument_somDumpSelf *somTD_LuDjvuDocument_somDumpSelf;
typedef void   SOMLINK somTP_LuDjvuDocument_somDumpSelfInt(LuDjvuDocument *somSelf, 
		long level);
typedef somTP_LuDjvuDocument_somDumpSelfInt *somTD_LuDjvuDocument_somDumpSelfInt;
}

#endif /* LuDjvuDocument_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for LuDjvuDocument
 */
class LuDjvuDocument : public LuDocument
{
public:

// LuDjvuDocument::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_LuDjvuDocument) LuDjvuDocumentNewClass(LuDjvuDocument_MajorVersion,LuDjvuDocument_MinorVersion);
   return (void*)
      SOM_Resolve(_LuDjvuDocument,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_LuDjvuDocument));
}

// LuDjvuDocument::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

LuDjvuDocument& operator=(LuDjvuDocument& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

LuDjvuDocument()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuDjvuDocumentCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

LuDjvuDocument(LuDjvuDocument* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuDjvuDocumentCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
LuDjvuDocument(const LuDjvuDocument* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuDjvuDocumentCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/*
 * Reintroduce inherited methods
 */

/* method: loadFile */
boolean   loadFile(Environment *ev, 
		string filename, 
		string password, 
		string* error)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,loadFile)
	(this, ev,filename,password,error);
}


/* method: getBpp */
short   getBpp(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,getBpp)
	(this, ev);
}


/* method: isScalable */
boolean   isScalable(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,isScalable)
	(this, ev);
}


/* method: isRotable */
boolean   isRotable(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,isRotable)
	(this, ev);
}


/* method: getPageCount */
long   getPageCount(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,getPageCount)
	(this, ev);
}


/* method: getPageSize */
void   getPageSize(Environment *ev, 
		long pagenum, 
		double* width, 
		double* height)
{
   SOM_ResolveD(this,LuDjvuDocument,LuDocument,getPageSize)
	(this, ev,pagenum,width,height);
}


/* method: renderPageToPixbuf */
void   renderPageToPixbuf(Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf)
{
   SOM_ResolveD(this,LuDjvuDocument,LuDocument,renderPageToPixbuf)
	(this, ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf);
}


/* method: isAsynchRenderingSupported */
boolean   isAsynchRenderingSupported(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,isAsynchRenderingSupported)
	(this, ev);
}


/* method: renderPageToPixbufAsynch */
void   renderPageToPixbufAsynch(Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf, 
		LuDocument_asynchCallbackFn fnd, 
		LuDocument_asynchCallbackFn fna, 
		somToken fndata)
{
   SOM_ResolveD(this,LuDjvuDocument,LuDocument,renderPageToPixbufAsynch)
	(this, ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf,fnd,fna,fndata);
}


/* method: isRenderIntoPS */
boolean   isRenderIntoPS(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,isRenderIntoPS)
	(this, ev);
}


/* method: renderPageToPS */
void   renderPageToPS(Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		unsigned long hps, 
		somMToken rect)
{
   SOM_ResolveD(this,LuDjvuDocument,LuDocument,renderPageToPS)
	(this, ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,hps,rect);
}


/* method: isHaveText */
boolean   isHaveText(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,isHaveText)
	(this, ev);
}


/* method: getSelectionRectangles */
LuDocument_LuRectSequence*   getSelectionRectangles(Environment *ev, 
		long pagenum, 
		LuRectangle* selection)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,getSelectionRectangles)
	(this, ev,pagenum,selection);
}


/* noself procedure: freeRectangles */
static void   freeRectangles(Environment *ev, 
		LuDocument_LuRectSequence* rectangles)
{
   ((somTD_LuDjvuDocument_freeRectangles)LuDocumentClassData.freeRectangles)
	( ev,rectangles);
}


/* method: getText */
string   getText(Environment *ev, 
		long pagenum, 
		LuRectangle* selection)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,getText)
	(this, ev,pagenum,selection);
}


/* method: isHaveLinks */
boolean   isHaveLinks(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,isHaveLinks)
	(this, ev);
}


/* method: getLinkMapping */
LuDocument_LuLinkMapSequence*   getLinkMapping(Environment *ev, 
		long pagenum)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,getLinkMapping)
	(this, ev,pagenum);
}


/* noself procedure: freeLinkMapping */
static void   freeLinkMapping(Environment *ev, 
		LuDocument_LuLinkMapSequence* mapping)
{
   ((somTD_LuDjvuDocument_freeLinkMapping)LuDocumentClassData.freeLinkMapping)
	( ev,mapping);
}


/* method: isSaveable */
boolean   isSaveable(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,isSaveable)
	(this, ev);
}


/* method: saveAs */
boolean   saveAs(Environment *ev, 
		string filename)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,saveAs)
	(this, ev,filename);
}


/* method: isPostScriptExportable */
boolean   isPostScriptExportable(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,isPostScriptExportable)
	(this, ev);
}


/* method: exportToPostScript */
void   exportToPostScript(Environment *ev, 
		string filename, 
		long first_page, 
		long last_page, 
		double width, 
		double height, 
		boolean duplex)
{
   SOM_ResolveD(this,LuDjvuDocument,LuDocument,exportToPostScript)
	(this, ev,filename,first_page,last_page,width,height,duplex);
}


/* method: isHaveFontInfo */
boolean   isHaveFontInfo(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,isHaveFontInfo)
	(this, ev);
}


/* method: getFontInfo */
LuDocument_LuFontInfoSequence*   getFontInfo(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,getFontInfo)
	(this, ev);
}


/* noself procedure: freeFontInfo */
static void   freeFontInfo(Environment *ev, 
		LuDocument_LuFontInfoSequence* fonts)
{
   ((somTD_LuDjvuDocument_freeFontInfo)LuDocumentClassData.freeFontInfo)
	( ev,fonts);
}


/* method: isHaveIndex */
boolean   isHaveIndex(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,isHaveIndex)
	(this, ev);
}


/* method: getIndex */
LuIndexNode*   getIndex(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,getIndex)
	(this, ev);
}


/* method: getDocumentInfo */
LuDocumentInfo*   getDocumentInfo(Environment *ev)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,getDocumentInfo)
	(this, ev);
}


/* noself procedure: freeDocumentInfo */
static void   freeDocumentInfo(Environment *ev, 
		LuDocumentInfo* info)
{
   ((somTD_LuDjvuDocument_freeDocumentInfo)LuDocumentClassData.freeDocumentInfo)
	( ev,info);
}


/* method: getThumbnailSize */
boolean   getThumbnailSize(Environment *ev, 
		long pagenum, 
		short suggested_width, 
		short* width, 
		short* height)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,getThumbnailSize)
	(this, ev,pagenum,suggested_width,width,height);
}


/* method: getThumbnail */
LuPixbuf*   getThumbnail(Environment *ev, 
		long pagenum, 
		short suggested_width)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,getThumbnail)
	(this, ev,pagenum,suggested_width);
}


/* method: searchText */
LuDocument_LuRectSequence*   searchText(Environment *ev, 
		long pagenum, 
		string text, 
		boolean caseSensitive)
{
   return SOM_ResolveD(this,LuDjvuDocument,LuDocument,searchText)
	(this, ev,pagenum,text,caseSensitive);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
LuDjvuDocument*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
LuDjvuDocument*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
LuDjvuDocument*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
LuDjvuDocument*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/* the va_list invocation form */
boolean   LuDjvuDocument_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/* the va_list invocation form */
boolean   LuDjvuDocument_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LuDjvuDocument,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/* the va_list invocation form */
void   LuDjvuDocument_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/* the va_list invocation form */
long   LuDjvuDocument_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/* the va_list invocation form */
void*   LuDjvuDocument_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/* the va_list invocation form */
double   LuDjvuDocument_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,LuDjvuDocument,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,LuDjvuDocument,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* LuDjvuDocument */



#endif       /* SOM_LuDjvuDocument_xh */
