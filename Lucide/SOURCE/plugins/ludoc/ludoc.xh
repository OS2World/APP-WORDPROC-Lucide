
/*
 * This file was generated by the SOM Compiler.
 * FileName: ludoc.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_LuDocument_xh
#define SOM_LuDocument_xh

class LuDocument;

#define LuDocument_MajorVersion 0
#define LuDocument_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */


#include <lutypes.h>
#include <lupixbuf.xh>
#include <luinode.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef LuDocument_API
#define LuDocument_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
struct LuRectangle;
#ifndef _IDL_SEQUENCE_LuRectangle_defined
#define _IDL_SEQUENCE_LuRectangle_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    struct LuRectangle *_buffer;
} _IDL_SEQUENCE_LuRectangle;
#endif /* _IDL_SEQUENCE_LuRectangle_defined */ 
typedef
_IDL_SEQUENCE_LuRectangle LuDocument_LuRectSequence;
struct LuLinkMapping;
#ifndef _IDL_SEQUENCE_LuLinkMapping_defined
#define _IDL_SEQUENCE_LuLinkMapping_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    struct LuLinkMapping *_buffer;
} _IDL_SEQUENCE_LuLinkMapping;
#endif /* _IDL_SEQUENCE_LuLinkMapping_defined */ 
typedef
_IDL_SEQUENCE_LuLinkMapping LuDocument_LuLinkMapSequence;
struct LuFontInfo;
#ifndef _IDL_SEQUENCE_LuFontInfo_defined
#define _IDL_SEQUENCE_LuFontInfo_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    struct LuFontInfo *_buffer;
} _IDL_SEQUENCE_LuFontInfo;
#endif /* _IDL_SEQUENCE_LuFontInfo_defined */ 
typedef
_IDL_SEQUENCE_LuFontInfo LuDocument_LuFontInfoSequence;
typedef
somMToken LuDocument_asynchCallbackFn;

#ifndef SOM_DONT_USE_SHORT_NAMES

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_LuRectSequence
    #ifdef LuRectSequence
        #undef LuRectSequence
        #define SOMTGD_LuRectSequence 1
    #else
        #define LuRectSequence LuDocument_LuRectSequence
    #endif /* LuRectSequence */
#endif /* SOMTGD_LuRectSequence */
#endif /* SOM_DONT_USE_SHORT_NAMES */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_LuLinkMapSequence
    #ifdef LuLinkMapSequence
        #undef LuLinkMapSequence
        #define SOMTGD_LuLinkMapSequence 1
    #else
        #define LuLinkMapSequence LuDocument_LuLinkMapSequence
    #endif /* LuLinkMapSequence */
#endif /* SOMTGD_LuLinkMapSequence */
#endif /* SOM_DONT_USE_SHORT_NAMES */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_LuFontInfoSequence
    #ifdef LuFontInfoSequence
        #undef LuFontInfoSequence
        #define SOMTGD_LuFontInfoSequence 1
    #else
        #define LuFontInfoSequence LuDocument_LuFontInfoSequence
    #endif /* LuFontInfoSequence */
#endif /* SOMTGD_LuFontInfoSequence */
#endif /* SOM_DONT_USE_SHORT_NAMES */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_asynchCallbackFn
    #ifdef asynchCallbackFn
        #undef asynchCallbackFn
        #define SOMTGD_asynchCallbackFn 1
    #else
        #define asynchCallbackFn LuDocument_asynchCallbackFn
    #endif /* asynchCallbackFn */
#endif /* SOMTGD_asynchCallbackFn */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the LuDocument Class */
SOMEXTERN SOMClass * SOMLINK LuDocumentNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the LuDocument class object, and the methods it introduces. */
SOMEXTERN struct LuDocumentClassDataStructure {
	SOMClass *classObject;
	somMToken loadFile;
	somMToken getBpp;
	somMToken isScalable;
	somMToken isRotable;
	somMToken getPageCount;
	somMToken getPageSize;
	somMToken renderPageToPixbuf;
	somMToken isAsynchRenderingSupported;
	somMToken renderPageToPixbufAsynch;
	somMToken isRenderIntoPS;
	somMToken renderPageToPS;
	somMToken isHaveText;
	somMToken getSelectionRectangles;
	somMethodProc *freeRectangles;
	somMToken getText;
	somMToken isHaveLinks;
	somMToken getLinkMapping;
	somMethodProc *freeLinkMapping;
	somMToken isSaveable;
	somMToken saveAs;
	somMToken isPostScriptExportable;
	somMToken exportToPostScript;
	somMToken isHaveFontInfo;
	somMToken getFontInfo;
	somMethodProc *freeFontInfo;
	somMToken isHaveIndex;
	somMToken getIndex;
	somMToken getDocumentInfo;
	somMethodProc *freeDocumentInfo;
	somMToken getThumbnailSize;
	somMToken getThumbnail;
	somMToken searchText;
} SOMDLINK LuDocumentClassData;
#define _LuDocument LuDocumentClassData.classObject

/* The API to parentMtabs for LuDocument, and the instance data it introduces. */
SOMEXTERN struct LuDocumentCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK LuDocumentCClassData;

/*
 * -- Typedefs for LuDocument Method Procedures
 */
SOMEXTERNF {
typedef boolean   SOMLINK somTP_LuDocument_loadFile(LuDocument *somSelf, Environment *ev, 
		string filename, 
		string password, 
		string* error);
typedef somTP_LuDocument_loadFile *somTD_LuDocument_loadFile;
typedef short   SOMLINK somTP_LuDocument_getBpp(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_getBpp *somTD_LuDocument_getBpp;
typedef boolean   SOMLINK somTP_LuDocument_isScalable(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_isScalable *somTD_LuDocument_isScalable;
typedef boolean   SOMLINK somTP_LuDocument_isRotable(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_isRotable *somTD_LuDocument_isRotable;
typedef long   SOMLINK somTP_LuDocument_getPageCount(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_getPageCount *somTD_LuDocument_getPageCount;
typedef void   SOMLINK somTP_LuDocument_getPageSize(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		double* width, 
		double* height);
typedef somTP_LuDocument_getPageSize *somTD_LuDocument_getPageSize;
typedef void   SOMLINK somTP_LuDocument_renderPageToPixbuf(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf);
typedef somTP_LuDocument_renderPageToPixbuf *somTD_LuDocument_renderPageToPixbuf;
typedef boolean   SOMLINK somTP_LuDocument_isAsynchRenderingSupported(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_isAsynchRenderingSupported *somTD_LuDocument_isAsynchRenderingSupported;
typedef void   SOMLINK somTP_LuDocument_renderPageToPixbufAsynch(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf, 
		LuDocument_asynchCallbackFn fnd, 
		LuDocument_asynchCallbackFn fna, 
		somToken fndata);
typedef somTP_LuDocument_renderPageToPixbufAsynch *somTD_LuDocument_renderPageToPixbufAsynch;
typedef boolean   SOMLINK somTP_LuDocument_isRenderIntoPS(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_isRenderIntoPS *somTD_LuDocument_isRenderIntoPS;
typedef void   SOMLINK somTP_LuDocument_renderPageToPS(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		unsigned long hps, 
		somMToken rect);
typedef somTP_LuDocument_renderPageToPS *somTD_LuDocument_renderPageToPS;
typedef boolean   SOMLINK somTP_LuDocument_isHaveText(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_isHaveText *somTD_LuDocument_isHaveText;
typedef LuDocument_LuRectSequence*   SOMLINK somTP_LuDocument_getSelectionRectangles(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		LuRectangle* selection);
typedef somTP_LuDocument_getSelectionRectangles *somTD_LuDocument_getSelectionRectangles;
typedef void   SOMLINK somTP_LuDocument_freeRectangles(Environment *ev, 
		LuDocument_LuRectSequence* rectangles);
typedef somTP_LuDocument_freeRectangles *somTD_LuDocument_freeRectangles;
typedef string   SOMLINK somTP_LuDocument_getText(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		LuRectangle* selection);
typedef somTP_LuDocument_getText *somTD_LuDocument_getText;
typedef boolean   SOMLINK somTP_LuDocument_isHaveLinks(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_isHaveLinks *somTD_LuDocument_isHaveLinks;
typedef LuDocument_LuLinkMapSequence*   SOMLINK somTP_LuDocument_getLinkMapping(LuDocument *somSelf, Environment *ev, 
		long pagenum);
typedef somTP_LuDocument_getLinkMapping *somTD_LuDocument_getLinkMapping;
typedef void   SOMLINK somTP_LuDocument_freeLinkMapping(Environment *ev, 
		LuDocument_LuLinkMapSequence* mapping);
typedef somTP_LuDocument_freeLinkMapping *somTD_LuDocument_freeLinkMapping;
typedef boolean   SOMLINK somTP_LuDocument_isSaveable(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_isSaveable *somTD_LuDocument_isSaveable;
typedef boolean   SOMLINK somTP_LuDocument_saveAs(LuDocument *somSelf, Environment *ev, 
		string filename);
typedef somTP_LuDocument_saveAs *somTD_LuDocument_saveAs;
typedef boolean   SOMLINK somTP_LuDocument_isPostScriptExportable(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_isPostScriptExportable *somTD_LuDocument_isPostScriptExportable;
typedef void   SOMLINK somTP_LuDocument_exportToPostScript(LuDocument *somSelf, Environment *ev, 
		string filename, 
		long first_page, 
		long last_page, 
		double width, 
		double height, 
		boolean duplex);
typedef somTP_LuDocument_exportToPostScript *somTD_LuDocument_exportToPostScript;
typedef boolean   SOMLINK somTP_LuDocument_isHaveFontInfo(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_isHaveFontInfo *somTD_LuDocument_isHaveFontInfo;
typedef LuDocument_LuFontInfoSequence*   SOMLINK somTP_LuDocument_getFontInfo(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_getFontInfo *somTD_LuDocument_getFontInfo;
typedef void   SOMLINK somTP_LuDocument_freeFontInfo(Environment *ev, 
		LuDocument_LuFontInfoSequence* fonts);
typedef somTP_LuDocument_freeFontInfo *somTD_LuDocument_freeFontInfo;
typedef boolean   SOMLINK somTP_LuDocument_isHaveIndex(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_isHaveIndex *somTD_LuDocument_isHaveIndex;
typedef LuIndexNode*   SOMLINK somTP_LuDocument_getIndex(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_getIndex *somTD_LuDocument_getIndex;
typedef LuDocumentInfo*   SOMLINK somTP_LuDocument_getDocumentInfo(LuDocument *somSelf, Environment *ev);
typedef somTP_LuDocument_getDocumentInfo *somTD_LuDocument_getDocumentInfo;
typedef void   SOMLINK somTP_LuDocument_freeDocumentInfo(Environment *ev, 
		LuDocumentInfo* info);
typedef somTP_LuDocument_freeDocumentInfo *somTD_LuDocument_freeDocumentInfo;
typedef boolean   SOMLINK somTP_LuDocument_getThumbnailSize(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		short suggested_width, 
		short* width, 
		short* height);
typedef somTP_LuDocument_getThumbnailSize *somTD_LuDocument_getThumbnailSize;
typedef LuPixbuf*   SOMLINK somTP_LuDocument_getThumbnail(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		short suggested_width);
typedef somTP_LuDocument_getThumbnail *somTD_LuDocument_getThumbnail;
typedef LuDocument_LuRectSequence*   SOMLINK somTP_LuDocument_searchText(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		string text, 
		boolean caseSensitive);
typedef somTP_LuDocument_searchText *somTD_LuDocument_searchText;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_LuDocument_somDefaultInit(LuDocument *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_LuDocument_somDefaultInit *somTD_LuDocument_somDefaultInit;
typedef void   SOMLINK somTP_LuDocument_somDestruct(LuDocument *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_LuDocument_somDestruct *somTD_LuDocument_somDestruct;
typedef void   SOMLINK somTP_LuDocument_somDefaultCopyInit(LuDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDocument_somDefaultCopyInit *somTD_LuDocument_somDefaultCopyInit;
typedef LuDocument*   SOMLINK somTP_LuDocument_somDefaultAssign(LuDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDocument_somDefaultAssign *somTD_LuDocument_somDefaultAssign;
typedef void   SOMLINK somTP_LuDocument_somDefaultConstCopyInit(LuDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDocument_somDefaultConstCopyInit *somTD_LuDocument_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_LuDocument_somDefaultVCopyInit(LuDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDocument_somDefaultVCopyInit *somTD_LuDocument_somDefaultVCopyInit;
typedef void   SOMLINK somTP_LuDocument_somDefaultConstVCopyInit(LuDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDocument_somDefaultConstVCopyInit *somTD_LuDocument_somDefaultConstVCopyInit;
typedef LuDocument*   SOMLINK somTP_LuDocument_somDefaultConstAssign(LuDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDocument_somDefaultConstAssign *somTD_LuDocument_somDefaultConstAssign;
typedef LuDocument*   SOMLINK somTP_LuDocument_somDefaultVAssign(LuDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDocument_somDefaultVAssign *somTD_LuDocument_somDefaultVAssign;
typedef LuDocument*   SOMLINK somTP_LuDocument_somDefaultConstVAssign(LuDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuDocument_somDefaultConstVAssign *somTD_LuDocument_somDefaultConstVAssign;
typedef void   SOMLINK somTP_LuDocument_somInit(LuDocument *somSelf);
typedef somTP_LuDocument_somInit *somTD_LuDocument_somInit;
typedef void   SOMLINK somTP_LuDocument_somFree(LuDocument *somSelf);
typedef somTP_LuDocument_somFree *somTD_LuDocument_somFree;
typedef void   SOMLINK somTP_LuDocument_somUninit(LuDocument *somSelf);
typedef somTP_LuDocument_somUninit *somTD_LuDocument_somUninit;
typedef SOMClass*   SOMLINK somTP_LuDocument_somGetClass(LuDocument *somSelf);
typedef somTP_LuDocument_somGetClass *somTD_LuDocument_somGetClass;
typedef string   SOMLINK somTP_LuDocument_somGetClassName(LuDocument *somSelf);
typedef somTP_LuDocument_somGetClassName *somTD_LuDocument_somGetClassName;
typedef long   SOMLINK somTP_LuDocument_somGetSize(LuDocument *somSelf);
typedef somTP_LuDocument_somGetSize *somTD_LuDocument_somGetSize;
typedef boolean   SOMLINK somTP_LuDocument_somIsA(LuDocument *somSelf, 
		SOMClass* aClassObj);
typedef somTP_LuDocument_somIsA *somTD_LuDocument_somIsA;
typedef boolean   SOMLINK somTP_LuDocument_somIsInstanceOf(LuDocument *somSelf, 
		SOMClass* aClassObj);
typedef somTP_LuDocument_somIsInstanceOf *somTD_LuDocument_somIsInstanceOf;
typedef boolean   SOMLINK somTP_LuDocument_somRespondsTo(LuDocument *somSelf, 
		somId mId);
typedef somTP_LuDocument_somRespondsTo *somTD_LuDocument_somRespondsTo;
typedef boolean   SOMLINK somTP_LuDocument_somDispatch(LuDocument *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_LuDocument_somDispatch *somTD_LuDocument_somDispatch;
typedef boolean   SOMLINK somTP_LuDocument_somClassDispatch(LuDocument *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_LuDocument_somClassDispatch *somTD_LuDocument_somClassDispatch;
typedef boolean   SOMLINK somTP_LuDocument_somCastObj(LuDocument *somSelf, 
		SOMClass* cls);
typedef somTP_LuDocument_somCastObj *somTD_LuDocument_somCastObj;
typedef boolean   SOMLINK somTP_LuDocument_somResetObj(LuDocument *somSelf);
typedef somTP_LuDocument_somResetObj *somTD_LuDocument_somResetObj;
typedef void   SOMLINK somTP_LuDocument_somDispatchV(LuDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuDocument_somDispatchV *somTD_LuDocument_somDispatchV;
typedef long   SOMLINK somTP_LuDocument_somDispatchL(LuDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuDocument_somDispatchL *somTD_LuDocument_somDispatchL;
typedef void*   SOMLINK somTP_LuDocument_somDispatchA(LuDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuDocument_somDispatchA *somTD_LuDocument_somDispatchA;
typedef double   SOMLINK somTP_LuDocument_somDispatchD(LuDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuDocument_somDispatchD *somTD_LuDocument_somDispatchD;
typedef SOMObject*   SOMLINK somTP_LuDocument_somPrintSelf(LuDocument *somSelf);
typedef somTP_LuDocument_somPrintSelf *somTD_LuDocument_somPrintSelf;
typedef void   SOMLINK somTP_LuDocument_somDumpSelf(LuDocument *somSelf, 
		long level);
typedef somTP_LuDocument_somDumpSelf *somTD_LuDocument_somDumpSelf;
typedef void   SOMLINK somTP_LuDocument_somDumpSelfInt(LuDocument *somSelf, 
		long level);
typedef somTP_LuDocument_somDumpSelfInt *somTD_LuDocument_somDumpSelfInt;
}

#endif /* LuDocument_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for LuDocument
 */
class LuDocument : public SOMObject
{
public:

// LuDocument::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_LuDocument) LuDocumentNewClass(LuDocument_MajorVersion,LuDocument_MinorVersion);
   return (void*)
      SOM_Resolve(_LuDocument,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_LuDocument));
}

// LuDocument::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

LuDocument& operator=(LuDocument& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

LuDocument()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuDocumentCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

LuDocument(LuDocument* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuDocumentCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
LuDocument(const LuDocument* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuDocumentCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: loadFile */
boolean   loadFile(Environment *ev, 
		string filename, 
		string password, 
		string* error)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,loadFile)
	(this, ev,filename,password,error);
}


/* method: getBpp */
short   getBpp(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,getBpp)
	(this, ev);
}


/* method: isScalable */
boolean   isScalable(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,isScalable)
	(this, ev);
}


/* method: isRotable */
boolean   isRotable(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,isRotable)
	(this, ev);
}


/* method: getPageCount */
long   getPageCount(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,getPageCount)
	(this, ev);
}


/* method: getPageSize */
void   getPageSize(Environment *ev, 
		long pagenum, 
		double* width, 
		double* height)
{
   SOM_ResolveD(this,LuDocument,LuDocument,getPageSize)
	(this, ev,pagenum,width,height);
}


/* method: renderPageToPixbuf */
void   renderPageToPixbuf(Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf)
{
   SOM_ResolveD(this,LuDocument,LuDocument,renderPageToPixbuf)
	(this, ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf);
}


/* method: isAsynchRenderingSupported */
boolean   isAsynchRenderingSupported(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,isAsynchRenderingSupported)
	(this, ev);
}


/* method: renderPageToPixbufAsynch */
void   renderPageToPixbufAsynch(Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf, 
		LuDocument_asynchCallbackFn fnd, 
		LuDocument_asynchCallbackFn fna, 
		somToken fndata)
{
   SOM_ResolveD(this,LuDocument,LuDocument,renderPageToPixbufAsynch)
	(this, ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf,fnd,fna,fndata);
}


/* method: isRenderIntoPS */
boolean   isRenderIntoPS(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,isRenderIntoPS)
	(this, ev);
}


/* method: renderPageToPS */
void   renderPageToPS(Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		unsigned long hps, 
		somMToken rect)
{
   SOM_ResolveD(this,LuDocument,LuDocument,renderPageToPS)
	(this, ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,hps,rect);
}


/* method: isHaveText */
boolean   isHaveText(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,isHaveText)
	(this, ev);
}


/* method: getSelectionRectangles */
LuDocument_LuRectSequence*   getSelectionRectangles(Environment *ev, 
		long pagenum, 
		LuRectangle* selection)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,getSelectionRectangles)
	(this, ev,pagenum,selection);
}


/* noself procedure: freeRectangles */
static void   freeRectangles(Environment *ev, 
		LuDocument_LuRectSequence* rectangles)
{
   ((somTD_LuDocument_freeRectangles)LuDocumentClassData.freeRectangles)
	( ev,rectangles);
}


/* method: getText */
string   getText(Environment *ev, 
		long pagenum, 
		LuRectangle* selection)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,getText)
	(this, ev,pagenum,selection);
}


/* method: isHaveLinks */
boolean   isHaveLinks(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,isHaveLinks)
	(this, ev);
}


/* method: getLinkMapping */
LuDocument_LuLinkMapSequence*   getLinkMapping(Environment *ev, 
		long pagenum)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,getLinkMapping)
	(this, ev,pagenum);
}


/* noself procedure: freeLinkMapping */
static void   freeLinkMapping(Environment *ev, 
		LuDocument_LuLinkMapSequence* mapping)
{
   ((somTD_LuDocument_freeLinkMapping)LuDocumentClassData.freeLinkMapping)
	( ev,mapping);
}


/* method: isSaveable */
boolean   isSaveable(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,isSaveable)
	(this, ev);
}


/* method: saveAs */
boolean   saveAs(Environment *ev, 
		string filename)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,saveAs)
	(this, ev,filename);
}


/* method: isPostScriptExportable */
boolean   isPostScriptExportable(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,isPostScriptExportable)
	(this, ev);
}


/* method: exportToPostScript */
void   exportToPostScript(Environment *ev, 
		string filename, 
		long first_page, 
		long last_page, 
		double width, 
		double height, 
		boolean duplex)
{
   SOM_ResolveD(this,LuDocument,LuDocument,exportToPostScript)
	(this, ev,filename,first_page,last_page,width,height,duplex);
}


/* method: isHaveFontInfo */
boolean   isHaveFontInfo(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,isHaveFontInfo)
	(this, ev);
}


/* method: getFontInfo */
LuDocument_LuFontInfoSequence*   getFontInfo(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,getFontInfo)
	(this, ev);
}


/* noself procedure: freeFontInfo */
static void   freeFontInfo(Environment *ev, 
		LuDocument_LuFontInfoSequence* fonts)
{
   ((somTD_LuDocument_freeFontInfo)LuDocumentClassData.freeFontInfo)
	( ev,fonts);
}


/* method: isHaveIndex */
boolean   isHaveIndex(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,isHaveIndex)
	(this, ev);
}


/* method: getIndex */
LuIndexNode*   getIndex(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,getIndex)
	(this, ev);
}


/* method: getDocumentInfo */
LuDocumentInfo*   getDocumentInfo(Environment *ev)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,getDocumentInfo)
	(this, ev);
}


/* noself procedure: freeDocumentInfo */
static void   freeDocumentInfo(Environment *ev, 
		LuDocumentInfo* info)
{
   ((somTD_LuDocument_freeDocumentInfo)LuDocumentClassData.freeDocumentInfo)
	( ev,info);
}


/* method: getThumbnailSize */
boolean   getThumbnailSize(Environment *ev, 
		long pagenum, 
		short suggested_width, 
		short* width, 
		short* height)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,getThumbnailSize)
	(this, ev,pagenum,suggested_width,width,height);
}


/* method: getThumbnail */
LuPixbuf*   getThumbnail(Environment *ev, 
		long pagenum, 
		short suggested_width)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,getThumbnail)
	(this, ev,pagenum,suggested_width);
}


/* method: searchText */
LuDocument_LuRectSequence*   searchText(Environment *ev, 
		long pagenum, 
		string text, 
		boolean caseSensitive)
{
   return SOM_ResolveD(this,LuDocument,LuDocument,searchText)
	(this, ev,pagenum,text,caseSensitive);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,LuDocument,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
   SOM_ResolveD(this,LuDocument,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuDocument,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
LuDocument*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuDocument,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuDocument,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuDocument,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
LuDocument*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
LuDocument*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
LuDocument*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,LuDocument,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,LuDocument,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,LuDocument,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/* the va_list invocation form */
boolean   LuDocument_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,LuDocument,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LuDocument,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/* the va_list invocation form */
boolean   LuDocument_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,LuDocument,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LuDocument,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/* the va_list invocation form */
void   LuDocument_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,LuDocument,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,LuDocument,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/* the va_list invocation form */
long   LuDocument_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuDocument,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,LuDocument,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/* the va_list invocation form */
void*   LuDocument_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuDocument,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,LuDocument,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/* the va_list invocation form */
double   LuDocument_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuDocument,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,LuDocument,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,LuDocument,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,LuDocument,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,LuDocument,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* LuDocument */



#endif       /* SOM_LuDocument_xh */
