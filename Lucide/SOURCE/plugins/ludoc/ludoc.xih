
/*
 * This file was generated by the SOM Compiler.
 * FileName: ludoc.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxih: 2.47
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_LuDocument_xih
#define SOM_LuDocument_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_LuDocument_xh
#include <ludoc.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define LuDocument_MaxNoMethods 30

/*
 * -- Instance Data
 */
typedef void LuDocumentData;

/*
 * This class introduces no instance data, so no GetData macro is provided
 */

/*
 * -- Primary Implementation File Support
 */
#if (defined(LuDocument_Class_Source) || defined(SOM_Module_ludoc_Source))

/*
 * Trace/Debug macro
 */
#ifndef LuDocumentMethodDebug
   #define LuDocumentMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _loadFile somSelf->loadFile
  #define _getBpp somSelf->getBpp
  #define _isScalable somSelf->isScalable
  #define _isRotable somSelf->isRotable
  #define _getPageCount somSelf->getPageCount
  #define _getPageSize somSelf->getPageSize
  #define _renderPageToPixbuf somSelf->renderPageToPixbuf
  #define _isAsynchRenderingSupported somSelf->isAsynchRenderingSupported
  #define _renderPageToPixbufAsynch somSelf->renderPageToPixbufAsynch
  #define _isHaveText somSelf->isHaveText
  #define _getSelectionRectangles somSelf->getSelectionRectangles
  #define _freeRectangles somSelf->freeRectangles
  #define _getText somSelf->getText
  #define _isHaveLinks somSelf->isHaveLinks
  #define _getLinkMapping somSelf->getLinkMapping
  #define _freeLinkMapping somSelf->freeLinkMapping
  #define _isSaveable somSelf->isSaveable
  #define _saveAs somSelf->saveAs
  #define _isPSExportable somSelf->isPSExportable
  #define _exportToPS somSelf->exportToPS
  #define _isHaveFontInfo somSelf->isHaveFontInfo
  #define _getFontInfo somSelf->getFontInfo
  #define _freeFontInfo somSelf->freeFontInfo
  #define _isHaveIndex somSelf->isHaveIndex
  #define _getIndex somSelf->getIndex
  #define _getDocumentInfo somSelf->getDocumentInfo
  #define _freeDocumentInfo somSelf->freeDocumentInfo
  #define _getThumbnailSize somSelf->getThumbnailSize
  #define _getThumbnail somSelf->getThumbnail
  #define _searchText somSelf->searchText
  #define _somDefaultInit somSelf->somDefaultInit
#endif


/*
 * -- The LuDocument ClassData Structure
 */
SOMEXTERN struct LuDocumentClassDataStructure SOMDLINK LuDocumentClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary LuDocument ClassData structure
 */
SOMEXTERN struct LuDocumentCClassDataStructure SOMDLINK LuDocumentCClassData = {(somMethodTabs) NULL};


/*
 * New Method: loadFile
 */
SOM_Scope boolean  SOMLINK loadFile(LuDocument *somSelf, Environment *ev, 
		string filename, 
		string password, 
		string* error);
#ifndef somMN_loadFile_defined
#define somMN_loadFile_defined
static char *somMN_loadFile = "loadFile";
static somId somId_loadFile = &somMN_loadFile;
#endif  /* somMN_loadFile_defined */
#ifndef somDS_loadFile_defined
#define somDS_loadFile_defined
static char *somDS_loadFile = "::LuDocument::loadFile";
static somId somDI_loadFile = &somDS_loadFile;
#endif  /* somDS_loadFile_defined */

static somMethodInfo loadFileMethodInfo = {10, 20, 0};

static somApRdInfo loadFileStubs = {0, 0, &loadFileMethodInfo};

/*
 * New Method: getBpp
 */
SOM_Scope short  SOMLINK getBpp(LuDocument *somSelf, Environment *ev);
#ifndef somMN_getBpp_defined
#define somMN_getBpp_defined
static char *somMN_getBpp = "getBpp";
static somId somId_getBpp = &somMN_getBpp;
#endif  /* somMN_getBpp_defined */
#ifndef somDS_getBpp_defined
#define somDS_getBpp_defined
static char *somDS_getBpp = "::LuDocument::getBpp";
static somId somDI_getBpp = &somDS_getBpp;
#endif  /* somDS_getBpp_defined */

static somMethodInfo getBppMethodInfo = {12, 8, 0};

static somApRdInfo getBppStubs = {0, 0, &getBppMethodInfo};

/*
 * New Method: isScalable
 */
SOM_Scope boolean  SOMLINK isScalable(LuDocument *somSelf, Environment *ev);
#ifndef somMN_isScalable_defined
#define somMN_isScalable_defined
static char *somMN_isScalable = "isScalable";
static somId somId_isScalable = &somMN_isScalable;
#endif  /* somMN_isScalable_defined */
#ifndef somDS_isScalable_defined
#define somDS_isScalable_defined
static char *somDS_isScalable = "::LuDocument::isScalable";
static somId somDI_isScalable = &somDS_isScalable;
#endif  /* somDS_isScalable_defined */

static somMethodInfo isScalableMethodInfo = {10, 8, 0};

static somApRdInfo isScalableStubs = {0, 0, &isScalableMethodInfo};

/*
 * New Method: isRotable
 */
SOM_Scope boolean  SOMLINK isRotable(LuDocument *somSelf, Environment *ev);
#ifndef somMN_isRotable_defined
#define somMN_isRotable_defined
static char *somMN_isRotable = "isRotable";
static somId somId_isRotable = &somMN_isRotable;
#endif  /* somMN_isRotable_defined */
#ifndef somDS_isRotable_defined
#define somDS_isRotable_defined
static char *somDS_isRotable = "::LuDocument::isRotable";
static somId somDI_isRotable = &somDS_isRotable;
#endif  /* somDS_isRotable_defined */

static somMethodInfo isRotableMethodInfo = {10, 8, 0};

static somApRdInfo isRotableStubs = {0, 0, &isRotableMethodInfo};

/*
 * New Method: getPageCount
 */
SOM_Scope long  SOMLINK getPageCount(LuDocument *somSelf, Environment *ev);
#ifndef somMN_getPageCount_defined
#define somMN_getPageCount_defined
static char *somMN_getPageCount = "getPageCount";
static somId somId_getPageCount = &somMN_getPageCount;
#endif  /* somMN_getPageCount_defined */
#ifndef somDS_getPageCount_defined
#define somDS_getPageCount_defined
static char *somDS_getPageCount = "::LuDocument::getPageCount";
static somId somDI_getPageCount = &somDS_getPageCount;
#endif  /* somDS_getPageCount_defined */
#define getPageCount_somApRdDefault

/*
 * New Method: getPageSize
 */
SOM_Scope void  SOMLINK getPageSize(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		double* width, 
		double* height);
#ifndef somMN_getPageSize_defined
#define somMN_getPageSize_defined
static char *somMN_getPageSize = "getPageSize";
static somId somId_getPageSize = &somMN_getPageSize;
#endif  /* somMN_getPageSize_defined */
#ifndef somDS_getPageSize_defined
#define somDS_getPageSize_defined
static char *somDS_getPageSize = "::LuDocument::getPageSize";
static somId somDI_getPageSize = &somDS_getPageSize;
#endif  /* somDS_getPageSize_defined */

static somMethodInfo getPageSizeMethodInfo = {0, 28, 0};

static somApRdInfo getPageSizeStubs = {0, 0, &getPageSizeMethodInfo};

/*
 * New Method: renderPageToPixbuf
 */
SOM_Scope void  SOMLINK renderPageToPixbuf(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf);
#ifndef somMN_renderPageToPixbuf_defined
#define somMN_renderPageToPixbuf_defined
static char *somMN_renderPageToPixbuf = "renderPageToPixbuf";
static somId somId_renderPageToPixbuf = &somMN_renderPageToPixbuf;
#endif  /* somMN_renderPageToPixbuf_defined */
#ifndef somDS_renderPageToPixbuf_defined
#define somDS_renderPageToPixbuf_defined
static char *somDS_renderPageToPixbuf = "::LuDocument::renderPageToPixbuf";
static somId somDI_renderPageToPixbuf = &somDS_renderPageToPixbuf;
#endif  /* somDS_renderPageToPixbuf_defined */

static somFloatMap renderPageToPixbufFloatMap = {
30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };

static somMethodInfo renderPageToPixbufMethodInfo = {1, 44, &renderPageToPixbufFloatMap};

static somApRdInfo renderPageToPixbufStubs = {0, 0, &renderPageToPixbufMethodInfo};

/*
 * New Method: isAsynchRenderingSupported
 */
SOM_Scope boolean  SOMLINK isAsynchRenderingSupported(LuDocument *somSelf, Environment *ev);
#ifndef somMN_isAsynchRenderingSupported_defined
#define somMN_isAsynchRenderingSupported_defined
static char *somMN_isAsynchRenderingSupported = "isAsynchRenderingSupported";
static somId somId_isAsynchRenderingSupported = &somMN_isAsynchRenderingSupported;
#endif  /* somMN_isAsynchRenderingSupported_defined */
#ifndef somDS_isAsynchRenderingSupported_defined
#define somDS_isAsynchRenderingSupported_defined
static char *somDS_isAsynchRenderingSupported = "::LuDocument::isAsynchRenderingSupported";
static somId somDI_isAsynchRenderingSupported = &somDS_isAsynchRenderingSupported;
#endif  /* somDS_isAsynchRenderingSupported_defined */

static somMethodInfo isAsynchRenderingSupportedMethodInfo = {10, 8, 0};

static somApRdInfo isAsynchRenderingSupportedStubs = {0, 0, &isAsynchRenderingSupportedMethodInfo};

/*
 * New Method: renderPageToPixbufAsynch
 */
SOM_Scope void  SOMLINK renderPageToPixbufAsynch(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf, 
		LuDocument_asynchCallbackFn fnd, 
		LuDocument_asynchCallbackFn fna, 
		somToken fndata);
#ifndef somMN_renderPageToPixbufAsynch_defined
#define somMN_renderPageToPixbufAsynch_defined
static char *somMN_renderPageToPixbufAsynch = "renderPageToPixbufAsynch";
static somId somId_renderPageToPixbufAsynch = &somMN_renderPageToPixbufAsynch;
#endif  /* somMN_renderPageToPixbufAsynch_defined */
#ifndef somDS_renderPageToPixbufAsynch_defined
#define somDS_renderPageToPixbufAsynch_defined
static char *somDS_renderPageToPixbufAsynch = "::LuDocument::renderPageToPixbufAsynch";
static somId somDI_renderPageToPixbufAsynch = &somDS_renderPageToPixbufAsynch;
#endif  /* somDS_renderPageToPixbufAsynch_defined */

static somFloatMap renderPageToPixbufAsynchFloatMap = {
30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };

static somMethodInfo renderPageToPixbufAsynchMethodInfo = {1, 56, &renderPageToPixbufAsynchFloatMap};

static somApRdInfo renderPageToPixbufAsynchStubs = {0, 0, &renderPageToPixbufAsynchMethodInfo};

/*
 * New Method: isHaveText
 */
SOM_Scope boolean  SOMLINK isHaveText(LuDocument *somSelf, Environment *ev);
#ifndef somMN_isHaveText_defined
#define somMN_isHaveText_defined
static char *somMN_isHaveText = "isHaveText";
static somId somId_isHaveText = &somMN_isHaveText;
#endif  /* somMN_isHaveText_defined */
#ifndef somDS_isHaveText_defined
#define somDS_isHaveText_defined
static char *somDS_isHaveText = "::LuDocument::isHaveText";
static somId somDI_isHaveText = &somDS_isHaveText;
#endif  /* somDS_isHaveText_defined */

static somMethodInfo isHaveTextMethodInfo = {10, 8, 0};

static somApRdInfo isHaveTextStubs = {0, 0, &isHaveTextMethodInfo};

/*
 * New Method: getSelectionRectangles
 */
SOM_Scope LuDocument_LuRectSequence*  SOMLINK getSelectionRectangles(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		LuRectangle* selection);
#ifndef somMN_getSelectionRectangles_defined
#define somMN_getSelectionRectangles_defined
static char *somMN_getSelectionRectangles = "getSelectionRectangles";
static somId somId_getSelectionRectangles = &somMN_getSelectionRectangles;
#endif  /* somMN_getSelectionRectangles_defined */
#ifndef somDS_getSelectionRectangles_defined
#define somDS_getSelectionRectangles_defined
static char *somDS_getSelectionRectangles = "::LuDocument::getSelectionRectangles";
static somId somDI_getSelectionRectangles = &somDS_getSelectionRectangles;
#endif  /* somDS_getSelectionRectangles_defined */
#define getSelectionRectangles_somApRdDefault

/*
 * New Direct call procedure: freeRectangles
 */
SOM_Scope void  SOMLINK freeRectangles(Environment *ev, 
		LuDocument_LuRectSequence* rectangles);

/*
 * New Method: getText
 */
SOM_Scope string  SOMLINK getText(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		LuRectangle* selection);
#ifndef somMN_getText_defined
#define somMN_getText_defined
static char *somMN_getText = "getText";
static somId somId_getText = &somMN_getText;
#endif  /* somMN_getText_defined */
#ifndef somDS_getText_defined
#define somDS_getText_defined
static char *somDS_getText = "::LuDocument::getText";
static somId somDI_getText = &somDS_getText;
#endif  /* somDS_getText_defined */
#define getText_somApRdDefault

/*
 * New Method: isHaveLinks
 */
SOM_Scope boolean  SOMLINK isHaveLinks(LuDocument *somSelf, Environment *ev);
#ifndef somMN_isHaveLinks_defined
#define somMN_isHaveLinks_defined
static char *somMN_isHaveLinks = "isHaveLinks";
static somId somId_isHaveLinks = &somMN_isHaveLinks;
#endif  /* somMN_isHaveLinks_defined */
#ifndef somDS_isHaveLinks_defined
#define somDS_isHaveLinks_defined
static char *somDS_isHaveLinks = "::LuDocument::isHaveLinks";
static somId somDI_isHaveLinks = &somDS_isHaveLinks;
#endif  /* somDS_isHaveLinks_defined */

static somMethodInfo isHaveLinksMethodInfo = {10, 8, 0};

static somApRdInfo isHaveLinksStubs = {0, 0, &isHaveLinksMethodInfo};

/*
 * New Method: getLinkMapping
 */
SOM_Scope LuDocument_LuLinkMapSequence*  SOMLINK getLinkMapping(LuDocument *somSelf, Environment *ev, 
		long pagenum);
#ifndef somMN_getLinkMapping_defined
#define somMN_getLinkMapping_defined
static char *somMN_getLinkMapping = "getLinkMapping";
static somId somId_getLinkMapping = &somMN_getLinkMapping;
#endif  /* somMN_getLinkMapping_defined */
#ifndef somDS_getLinkMapping_defined
#define somDS_getLinkMapping_defined
static char *somDS_getLinkMapping = "::LuDocument::getLinkMapping";
static somId somDI_getLinkMapping = &somDS_getLinkMapping;
#endif  /* somDS_getLinkMapping_defined */
#define getLinkMapping_somApRdDefault

/*
 * New Direct call procedure: freeLinkMapping
 */
SOM_Scope void  SOMLINK freeLinkMapping(Environment *ev, 
		LuDocument_LuLinkMapSequence* mapping);

/*
 * New Method: isSaveable
 */
SOM_Scope boolean  SOMLINK isSaveable(LuDocument *somSelf, Environment *ev);
#ifndef somMN_isSaveable_defined
#define somMN_isSaveable_defined
static char *somMN_isSaveable = "isSaveable";
static somId somId_isSaveable = &somMN_isSaveable;
#endif  /* somMN_isSaveable_defined */
#ifndef somDS_isSaveable_defined
#define somDS_isSaveable_defined
static char *somDS_isSaveable = "::LuDocument::isSaveable";
static somId somDI_isSaveable = &somDS_isSaveable;
#endif  /* somDS_isSaveable_defined */

static somMethodInfo isSaveableMethodInfo = {10, 8, 0};

static somApRdInfo isSaveableStubs = {0, 0, &isSaveableMethodInfo};

/*
 * New Method: saveAs
 */
SOM_Scope boolean  SOMLINK saveAs(LuDocument *somSelf, Environment *ev, 
		string filename);
#ifndef somMN_saveAs_defined
#define somMN_saveAs_defined
static char *somMN_saveAs = "saveAs";
static somId somId_saveAs = &somMN_saveAs;
#endif  /* somMN_saveAs_defined */
#ifndef somDS_saveAs_defined
#define somDS_saveAs_defined
static char *somDS_saveAs = "::LuDocument::saveAs";
static somId somDI_saveAs = &somDS_saveAs;
#endif  /* somDS_saveAs_defined */

static somMethodInfo saveAsMethodInfo = {10, 12, 0};

static somApRdInfo saveAsStubs = {0, 0, &saveAsMethodInfo};

/*
 * New Method: isPSExportable
 */
SOM_Scope boolean  SOMLINK isPSExportable(LuDocument *somSelf, Environment *ev);
#ifndef somMN_isPSExportable_defined
#define somMN_isPSExportable_defined
static char *somMN_isPSExportable = "isPSExportable";
static somId somId_isPSExportable = &somMN_isPSExportable;
#endif  /* somMN_isPSExportable_defined */
#ifndef somDS_isPSExportable_defined
#define somDS_isPSExportable_defined
static char *somDS_isPSExportable = "::LuDocument::isPSExportable";
static somId somDI_isPSExportable = &somDS_isPSExportable;
#endif  /* somDS_isPSExportable_defined */

static somMethodInfo isPSExportableMethodInfo = {10, 8, 0};

static somApRdInfo isPSExportableStubs = {0, 0, &isPSExportableMethodInfo};

/*
 * New Method: exportToPS
 */
SOM_Scope void  SOMLINK exportToPS(LuDocument *somSelf, Environment *ev, 
		string filename, 
		long first_page, 
		long last_page, 
		double width, 
		double height, 
		boolean duplex);
#ifndef somMN_exportToPS_defined
#define somMN_exportToPS_defined
static char *somMN_exportToPS = "exportToPS";
static somId somId_exportToPS = &somMN_exportToPS;
#endif  /* somMN_exportToPS_defined */
#ifndef somDS_exportToPS_defined
#define somDS_exportToPS_defined
static char *somDS_exportToPS = "::LuDocument::exportToPS";
static somId somDI_exportToPS = &somDS_exportToPS;
#endif  /* somDS_exportToPS_defined */

static somFloatMap exportToPSFloatMap = {
20, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };

static somMethodInfo exportToPSMethodInfo = {1, 40, &exportToPSFloatMap};

static somApRdInfo exportToPSStubs = {0, 0, &exportToPSMethodInfo};

/*
 * New Method: isHaveFontInfo
 */
SOM_Scope boolean  SOMLINK isHaveFontInfo(LuDocument *somSelf, Environment *ev);
#ifndef somMN_isHaveFontInfo_defined
#define somMN_isHaveFontInfo_defined
static char *somMN_isHaveFontInfo = "isHaveFontInfo";
static somId somId_isHaveFontInfo = &somMN_isHaveFontInfo;
#endif  /* somMN_isHaveFontInfo_defined */
#ifndef somDS_isHaveFontInfo_defined
#define somDS_isHaveFontInfo_defined
static char *somDS_isHaveFontInfo = "::LuDocument::isHaveFontInfo";
static somId somDI_isHaveFontInfo = &somDS_isHaveFontInfo;
#endif  /* somDS_isHaveFontInfo_defined */

static somMethodInfo isHaveFontInfoMethodInfo = {10, 8, 0};

static somApRdInfo isHaveFontInfoStubs = {0, 0, &isHaveFontInfoMethodInfo};

/*
 * New Method: getFontInfo
 */
SOM_Scope LuDocument_LuFontInfoSequence*  SOMLINK getFontInfo(LuDocument *somSelf, Environment *ev);
#ifndef somMN_getFontInfo_defined
#define somMN_getFontInfo_defined
static char *somMN_getFontInfo = "getFontInfo";
static somId somId_getFontInfo = &somMN_getFontInfo;
#endif  /* somMN_getFontInfo_defined */
#ifndef somDS_getFontInfo_defined
#define somDS_getFontInfo_defined
static char *somDS_getFontInfo = "::LuDocument::getFontInfo";
static somId somDI_getFontInfo = &somDS_getFontInfo;
#endif  /* somDS_getFontInfo_defined */
#define getFontInfo_somApRdDefault

/*
 * New Direct call procedure: freeFontInfo
 */
SOM_Scope void  SOMLINK freeFontInfo(Environment *ev, 
		LuDocument_LuFontInfoSequence* fonts);

/*
 * New Method: isHaveIndex
 */
SOM_Scope boolean  SOMLINK isHaveIndex(LuDocument *somSelf, Environment *ev);
#ifndef somMN_isHaveIndex_defined
#define somMN_isHaveIndex_defined
static char *somMN_isHaveIndex = "isHaveIndex";
static somId somId_isHaveIndex = &somMN_isHaveIndex;
#endif  /* somMN_isHaveIndex_defined */
#ifndef somDS_isHaveIndex_defined
#define somDS_isHaveIndex_defined
static char *somDS_isHaveIndex = "::LuDocument::isHaveIndex";
static somId somDI_isHaveIndex = &somDS_isHaveIndex;
#endif  /* somDS_isHaveIndex_defined */

static somMethodInfo isHaveIndexMethodInfo = {10, 8, 0};

static somApRdInfo isHaveIndexStubs = {0, 0, &isHaveIndexMethodInfo};

/*
 * New Method: getIndex
 */
SOM_Scope LuIndexNode*  SOMLINK getIndex(LuDocument *somSelf, Environment *ev);
#ifndef somMN_getIndex_defined
#define somMN_getIndex_defined
static char *somMN_getIndex = "getIndex";
static somId somId_getIndex = &somMN_getIndex;
#endif  /* somMN_getIndex_defined */
#ifndef somDS_getIndex_defined
#define somDS_getIndex_defined
static char *somDS_getIndex = "::LuDocument::getIndex";
static somId somDI_getIndex = &somDS_getIndex;
#endif  /* somDS_getIndex_defined */
#define getIndex_somApRdDefault

/*
 * New Method: getDocumentInfo
 */
SOM_Scope LuDocumentInfo*  SOMLINK getDocumentInfo(LuDocument *somSelf, Environment *ev);
#ifndef somMN_getDocumentInfo_defined
#define somMN_getDocumentInfo_defined
static char *somMN_getDocumentInfo = "getDocumentInfo";
static somId somId_getDocumentInfo = &somMN_getDocumentInfo;
#endif  /* somMN_getDocumentInfo_defined */
#ifndef somDS_getDocumentInfo_defined
#define somDS_getDocumentInfo_defined
static char *somDS_getDocumentInfo = "::LuDocument::getDocumentInfo";
static somId somDI_getDocumentInfo = &somDS_getDocumentInfo;
#endif  /* somDS_getDocumentInfo_defined */
#define getDocumentInfo_somApRdDefault

/*
 * New Direct call procedure: freeDocumentInfo
 */
SOM_Scope void  SOMLINK freeDocumentInfo(Environment *ev, 
		LuDocumentInfo* info);

/*
 * New Method: getThumbnailSize
 */
SOM_Scope boolean  SOMLINK getThumbnailSize(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		short suggested_width, 
		short* width, 
		short* height);
#ifndef somMN_getThumbnailSize_defined
#define somMN_getThumbnailSize_defined
static char *somMN_getThumbnailSize = "getThumbnailSize";
static somId somId_getThumbnailSize = &somMN_getThumbnailSize;
#endif  /* somMN_getThumbnailSize_defined */
#ifndef somDS_getThumbnailSize_defined
#define somDS_getThumbnailSize_defined
static char *somDS_getThumbnailSize = "::LuDocument::getThumbnailSize";
static somId somDI_getThumbnailSize = &somDS_getThumbnailSize;
#endif  /* somDS_getThumbnailSize_defined */

static somMethodInfo getThumbnailSizeMethodInfo = {10, 24, 0};

static somApRdInfo getThumbnailSizeStubs = {0, 0, &getThumbnailSizeMethodInfo};

/*
 * New Method: getThumbnail
 */
SOM_Scope LuPixbuf*  SOMLINK getThumbnail(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		short suggested_width);
#ifndef somMN_getThumbnail_defined
#define somMN_getThumbnail_defined
static char *somMN_getThumbnail = "getThumbnail";
static somId somId_getThumbnail = &somMN_getThumbnail;
#endif  /* somMN_getThumbnail_defined */
#ifndef somDS_getThumbnail_defined
#define somDS_getThumbnail_defined
static char *somDS_getThumbnail = "::LuDocument::getThumbnail";
static somId somDI_getThumbnail = &somDS_getThumbnail;
#endif  /* somDS_getThumbnail_defined */
#define getThumbnail_somApRdDefault

/*
 * New Method: searchText
 */
SOM_Scope LuDocument_LuRectSequence*  SOMLINK searchText(LuDocument *somSelf, Environment *ev, 
		long pagenum, 
		string text, 
		boolean caseSensitive);
#ifndef somMN_searchText_defined
#define somMN_searchText_defined
static char *somMN_searchText = "searchText";
static somId somId_searchText = &somMN_searchText;
#endif  /* somMN_searchText_defined */
#ifndef somDS_searchText_defined
#define somDS_searchText_defined
static char *somDS_searchText = "::LuDocument::searchText";
static somId somDI_searchText = &somDS_searchText;
#endif  /* somDS_searchText_defined */
#define searchText_somApRdDefault

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK somDefaultInit(LuDocument *somSelf,
		som3InitCtrl* ctrl);
static char *somMN_LuDocumentsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_LuDocumentsomDefaultInit = &somMN_LuDocumentsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_LuDocumentsomDefaultInit
#endif

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t LuDocumentSM[] = {
    {    &LuDocumentClassData.loadFile,
         &somId_loadFile,
         &somDI_loadFile,
         (somMethodProc *) loadFile,
         (somMethodProc *)((void*)-1),
#ifdef loadFile_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &loadFileStubs) },
#endif
    {    &LuDocumentClassData.getBpp,
         &somId_getBpp,
         &somDI_getBpp,
         (somMethodProc *) getBpp,
         (somMethodProc *)((void*)-1),
#ifdef getBpp_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getBppStubs) },
#endif
    {    &LuDocumentClassData.isScalable,
         &somId_isScalable,
         &somDI_isScalable,
         (somMethodProc *) isScalable,
         (somMethodProc *)((void*)-1),
#ifdef isScalable_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &isScalableStubs) },
#endif
    {    &LuDocumentClassData.isRotable,
         &somId_isRotable,
         &somDI_isRotable,
         (somMethodProc *) isRotable,
         (somMethodProc *)((void*)-1),
#ifdef isRotable_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &isRotableStubs) },
#endif
    {    &LuDocumentClassData.getPageCount,
         &somId_getPageCount,
         &somDI_getPageCount,
         (somMethodProc *) getPageCount,
         (somMethodProc *)((void*)-1),
#ifdef getPageCount_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getPageCountStubs) },
#endif
    {    &LuDocumentClassData.getPageSize,
         &somId_getPageSize,
         &somDI_getPageSize,
         (somMethodProc *) getPageSize,
         (somMethodProc *)((void*)-1),
#ifdef getPageSize_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getPageSizeStubs) },
#endif
    {    &LuDocumentClassData.renderPageToPixbuf,
         &somId_renderPageToPixbuf,
         &somDI_renderPageToPixbuf,
         (somMethodProc *) renderPageToPixbuf,
         (somMethodProc *)((void*)-1),
#ifdef renderPageToPixbuf_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &renderPageToPixbufStubs) },
#endif
    {    &LuDocumentClassData.isAsynchRenderingSupported,
         &somId_isAsynchRenderingSupported,
         &somDI_isAsynchRenderingSupported,
         (somMethodProc *) isAsynchRenderingSupported,
         (somMethodProc *)((void*)-1),
#ifdef isAsynchRenderingSupported_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &isAsynchRenderingSupportedStubs) },
#endif
    {    &LuDocumentClassData.renderPageToPixbufAsynch,
         &somId_renderPageToPixbufAsynch,
         &somDI_renderPageToPixbufAsynch,
         (somMethodProc *) renderPageToPixbufAsynch,
         (somMethodProc *)((void*)-1),
#ifdef renderPageToPixbufAsynch_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &renderPageToPixbufAsynchStubs) },
#endif
    {    &LuDocumentClassData.isHaveText,
         &somId_isHaveText,
         &somDI_isHaveText,
         (somMethodProc *) isHaveText,
         (somMethodProc *)((void*)-1),
#ifdef isHaveText_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &isHaveTextStubs) },
#endif
    {    &LuDocumentClassData.getSelectionRectangles,
         &somId_getSelectionRectangles,
         &somDI_getSelectionRectangles,
         (somMethodProc *) getSelectionRectangles,
         (somMethodProc *)((void*)-1),
#ifdef getSelectionRectangles_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getSelectionRectanglesStubs) },
#endif
    {    &LuDocumentClassData.getText,
         &somId_getText,
         &somDI_getText,
         (somMethodProc *) getText,
         (somMethodProc *)((void*)-1),
#ifdef getText_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getTextStubs) },
#endif
    {    &LuDocumentClassData.isHaveLinks,
         &somId_isHaveLinks,
         &somDI_isHaveLinks,
         (somMethodProc *) isHaveLinks,
         (somMethodProc *)((void*)-1),
#ifdef isHaveLinks_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &isHaveLinksStubs) },
#endif
    {    &LuDocumentClassData.getLinkMapping,
         &somId_getLinkMapping,
         &somDI_getLinkMapping,
         (somMethodProc *) getLinkMapping,
         (somMethodProc *)((void*)-1),
#ifdef getLinkMapping_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getLinkMappingStubs) },
#endif
    {    &LuDocumentClassData.isSaveable,
         &somId_isSaveable,
         &somDI_isSaveable,
         (somMethodProc *) isSaveable,
         (somMethodProc *)((void*)-1),
#ifdef isSaveable_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &isSaveableStubs) },
#endif
    {    &LuDocumentClassData.saveAs,
         &somId_saveAs,
         &somDI_saveAs,
         (somMethodProc *) saveAs,
         (somMethodProc *)((void*)-1),
#ifdef saveAs_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &saveAsStubs) },
#endif
    {    &LuDocumentClassData.isPSExportable,
         &somId_isPSExportable,
         &somDI_isPSExportable,
         (somMethodProc *) isPSExportable,
         (somMethodProc *)((void*)-1),
#ifdef isPSExportable_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &isPSExportableStubs) },
#endif
    {    &LuDocumentClassData.exportToPS,
         &somId_exportToPS,
         &somDI_exportToPS,
         (somMethodProc *) exportToPS,
         (somMethodProc *)((void*)-1),
#ifdef exportToPS_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &exportToPSStubs) },
#endif
    {    &LuDocumentClassData.isHaveFontInfo,
         &somId_isHaveFontInfo,
         &somDI_isHaveFontInfo,
         (somMethodProc *) isHaveFontInfo,
         (somMethodProc *)((void*)-1),
#ifdef isHaveFontInfo_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &isHaveFontInfoStubs) },
#endif
    {    &LuDocumentClassData.getFontInfo,
         &somId_getFontInfo,
         &somDI_getFontInfo,
         (somMethodProc *) getFontInfo,
         (somMethodProc *)((void*)-1),
#ifdef getFontInfo_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getFontInfoStubs) },
#endif
    {    &LuDocumentClassData.isHaveIndex,
         &somId_isHaveIndex,
         &somDI_isHaveIndex,
         (somMethodProc *) isHaveIndex,
         (somMethodProc *)((void*)-1),
#ifdef isHaveIndex_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &isHaveIndexStubs) },
#endif
    {    &LuDocumentClassData.getIndex,
         &somId_getIndex,
         &somDI_getIndex,
         (somMethodProc *) getIndex,
         (somMethodProc *)((void*)-1),
#ifdef getIndex_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getIndexStubs) },
#endif
    {    &LuDocumentClassData.getDocumentInfo,
         &somId_getDocumentInfo,
         &somDI_getDocumentInfo,
         (somMethodProc *) getDocumentInfo,
         (somMethodProc *)((void*)-1),
#ifdef getDocumentInfo_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getDocumentInfoStubs) },
#endif
    {    &LuDocumentClassData.getThumbnailSize,
         &somId_getThumbnailSize,
         &somDI_getThumbnailSize,
         (somMethodProc *) getThumbnailSize,
         (somMethodProc *)((void*)-1),
#ifdef getThumbnailSize_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getThumbnailSizeStubs) },
#endif
    {    &LuDocumentClassData.getThumbnail,
         &somId_getThumbnail,
         &somDI_getThumbnail,
         (somMethodProc *) getThumbnail,
         (somMethodProc *)((void*)-1),
#ifdef getThumbnail_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getThumbnailStubs) },
#endif
    {    &LuDocumentClassData.searchText,
         &somId_searchText,
         &somDI_searchText,
         (somMethodProc *) searchText,
         (somMethodProc *)((void*)-1),
#ifdef searchText_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &searchTextStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t LuDocumentOM[] = {
    {    &somId_LuDocumentsomDefaultInit,
         (somMethodProc *) somDefaultInit  },
};


/*
 *  class Ids
 */
static char * somCN_LuDocument = "LuDocument";
static char * somPCN_LuDocument_SOMObject = "SOMObject";

static somId somPCLuDocument[] = {
    &somPCN_LuDocument_SOMObject,
};

static somProcMethods_t LuDocumentPM[] = {
    (somMethodProc **)&LuDocumentClassData.freeRectangles,
    (somMethodProc *) freeRectangles,
    (somMethodProc **)&LuDocumentClassData.freeLinkMapping,
    (somMethodProc *) freeLinkMapping,
    (somMethodProc **)&LuDocumentClassData.freeFontInfo,
    (somMethodProc *) freeFontInfo,
    (somMethodProc **)&LuDocumentClassData.freeDocumentInfo,
    (somMethodProc *) freeDocumentInfo};

static somStaticClassInfo LuDocumentSCI = {
    4, 26, 1, 0, 4, 0, /* layout version 4 */ 
    LuDocument_MajorVersion, LuDocument_MinorVersion,
    0, LuDocument_MaxNoMethods, 1,
    &somCN_LuDocument,
    (somId) NULL, 1,
    somPCLuDocument,
    (somClassDataStructure *) &LuDocumentClassData,
    (somCClassDataStructure *) &LuDocumentCClassData,
    LuDocumentSM, LuDocumentOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   LuDocumentPM,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    30, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK LuDocumentNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_LuDocument && _LuDocument->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_LuDocument));
    SOMObjectNewClass(SOMObject_MajorVersion,SOMObject_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&LuDocumentSCI, somtmajorVersion, somtminorVersion));
    return result;
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */
#define LuDocument_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)LuDocumentCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for SOMObject */
#define LuDocument_Init_SOMObject_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
        /* special case SOMObject */\
        ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info));

#endif /* Primary Implementation Support */

#endif       /* SOM_LuDocument_xih */
