
/*
 * This file was generated by the SOM Compiler.
 * FileName: lupixbuf.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxih: 2.47
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_LuPixbuf_xih
#define SOM_LuPixbuf_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_LuPixbuf_xh
#include <lupixbuf.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define LuPixbuf_MaxNoMethods 7

/*
 * -- Instance Data
 */
typedef struct {
	long width;
	long height;
	short bpp;
	long dlen;
	long rowsize;
	void* data;
} LuPixbufData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef LuPixbufData* (SOMLINK * somTD_LuPixbuf_DataThunk)(void*);
#define LuPixbufGetData(somSelf) \
   (((somTD_LuPixbuf_DataThunk)(LuPixbufCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _width (somThis->width)
  #define _height (somThis->height)
  #define _bpp (somThis->bpp)
  #define _dlen (somThis->dlen)
  #define _rowsize (somThis->rowsize)
  #define _data (somThis->data)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(LuPixbuf_Class_Source) || defined(SOM_Module_lupixbuf_Source))

/*
 * Trace/Debug macro
 */
#ifndef LuPixbufMethodDebug
   #define LuPixbufMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _LuPixbufInit somSelf->LuPixbufInit
  #define _getWidth somSelf->getWidth
  #define _getHeight somSelf->getHeight
  #define _getRowSize somSelf->getRowSize
  #define _getDataLen somSelf->getDataLen
  #define _getDataPtr somSelf->getDataPtr
  #define _putAt somSelf->putAt
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The LuPixbuf ClassData Structure
 */
SOMEXTERN struct LuPixbufClassDataStructure SOMDLINK LuPixbufClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary LuPixbuf ClassData structure
 */
SOMEXTERN struct LuPixbufCClassDataStructure SOMDLINK LuPixbufCClassData = {(somMethodTabs) NULL};


/*
 * New Method: LuPixbufInit
 */
SOM_Scope void  SOMLINK LuPixbufInit(LuPixbuf *somSelf, Environment *ev, 
		somInitCtrl* ctrl, 
		long w, 
		long h);
#ifndef somMN_LuPixbufInit_defined
#define somMN_LuPixbufInit_defined
static char *somMN_LuPixbufInit = "LuPixbufInit";
static somId somId_LuPixbufInit = &somMN_LuPixbufInit;
#endif  /* somMN_LuPixbufInit_defined */
#ifndef somDS_LuPixbufInit_defined
#define somDS_LuPixbufInit_defined
static char *somDS_LuPixbufInit = "::LuPixbuf::LuPixbufInit";
static somId somDI_LuPixbufInit = &somDS_LuPixbufInit;
#endif  /* somDS_LuPixbufInit_defined */
#define LuPixbufInit_somApRdDefault

/*
 * New Method: getWidth
 */
SOM_Scope long  SOMLINK getWidth(LuPixbuf *somSelf, Environment *ev);
#ifndef somMN_getWidth_defined
#define somMN_getWidth_defined
static char *somMN_getWidth = "getWidth";
static somId somId_getWidth = &somMN_getWidth;
#endif  /* somMN_getWidth_defined */
#ifndef somDS_getWidth_defined
#define somDS_getWidth_defined
static char *somDS_getWidth = "::LuPixbuf::getWidth";
static somId somDI_getWidth = &somDS_getWidth;
#endif  /* somDS_getWidth_defined */
#define getWidth_somApRdDefault

/*
 * New Method: getHeight
 */
SOM_Scope long  SOMLINK getHeight(LuPixbuf *somSelf, Environment *ev);
#ifndef somMN_getHeight_defined
#define somMN_getHeight_defined
static char *somMN_getHeight = "getHeight";
static somId somId_getHeight = &somMN_getHeight;
#endif  /* somMN_getHeight_defined */
#ifndef somDS_getHeight_defined
#define somDS_getHeight_defined
static char *somDS_getHeight = "::LuPixbuf::getHeight";
static somId somDI_getHeight = &somDS_getHeight;
#endif  /* somDS_getHeight_defined */
#define getHeight_somApRdDefault

/*
 * New Method: getRowSize
 */
SOM_Scope long  SOMLINK getRowSize(LuPixbuf *somSelf, Environment *ev);
#ifndef somMN_getRowSize_defined
#define somMN_getRowSize_defined
static char *somMN_getRowSize = "getRowSize";
static somId somId_getRowSize = &somMN_getRowSize;
#endif  /* somMN_getRowSize_defined */
#ifndef somDS_getRowSize_defined
#define somDS_getRowSize_defined
static char *somDS_getRowSize = "::LuPixbuf::getRowSize";
static somId somDI_getRowSize = &somDS_getRowSize;
#endif  /* somDS_getRowSize_defined */
#define getRowSize_somApRdDefault

/*
 * New Method: getDataLen
 */
SOM_Scope long  SOMLINK getDataLen(LuPixbuf *somSelf, Environment *ev);
#ifndef somMN_getDataLen_defined
#define somMN_getDataLen_defined
static char *somMN_getDataLen = "getDataLen";
static somId somId_getDataLen = &somMN_getDataLen;
#endif  /* somMN_getDataLen_defined */
#ifndef somDS_getDataLen_defined
#define somDS_getDataLen_defined
static char *somDS_getDataLen = "::LuPixbuf::getDataLen";
static somId somDI_getDataLen = &somDS_getDataLen;
#endif  /* somDS_getDataLen_defined */
#define getDataLen_somApRdDefault

/*
 * New Method: getDataPtr
 */
SOM_Scope void*  SOMLINK getDataPtr(LuPixbuf *somSelf, Environment *ev);
#ifndef somMN_getDataPtr_defined
#define somMN_getDataPtr_defined
static char *somMN_getDataPtr = "getDataPtr";
static somId somId_getDataPtr = &somMN_getDataPtr;
#endif  /* somMN_getDataPtr_defined */
#ifndef somDS_getDataPtr_defined
#define somDS_getDataPtr_defined
static char *somDS_getDataPtr = "::LuPixbuf::getDataPtr";
static somId somDI_getDataPtr = &somDS_getDataPtr;
#endif  /* somDS_getDataPtr_defined */
#define getDataPtr_somApRdDefault

/*
 * New Method: putAt
 */
SOM_Scope void  SOMLINK putAt(LuPixbuf *somSelf, Environment *ev, 
		LuPixbuf* p, 
		long x, 
		long y);
#ifndef somMN_putAt_defined
#define somMN_putAt_defined
static char *somMN_putAt = "putAt";
static somId somId_putAt = &somMN_putAt;
#endif  /* somMN_putAt_defined */
#ifndef somDS_putAt_defined
#define somDS_putAt_defined
static char *somDS_putAt = "::LuPixbuf::putAt";
static somId somDI_putAt = &somDS_putAt;
#endif  /* somDS_putAt_defined */
#define putAt_somApRdDefault

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK somDestruct(LuPixbuf *somSelf,
		octet doFree,
		som3DestructCtrl* ctrl);
static char *somMN_LuPixbufsomDestruct = "SOMObject::somDestruct";
static somId somId_LuPixbufsomDestruct = &somMN_LuPixbufsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_LuPixbufsomDestruct
#endif

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t LuPixbufSM[] = {
    {    &LuPixbufClassData.LuPixbufInit,
         &somId_LuPixbufInit,
         &somDI_LuPixbufInit,
         (somMethodProc *) LuPixbufInit,
         (somMethodProc *)((void*)-1),
#ifdef LuPixbufInit_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &LuPixbufInitStubs) },
#endif
    {    &LuPixbufClassData.getWidth,
         &somId_getWidth,
         &somDI_getWidth,
         (somMethodProc *) getWidth,
         (somMethodProc *)((void*)-1),
#ifdef getWidth_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getWidthStubs) },
#endif
    {    &LuPixbufClassData.getHeight,
         &somId_getHeight,
         &somDI_getHeight,
         (somMethodProc *) getHeight,
         (somMethodProc *)((void*)-1),
#ifdef getHeight_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getHeightStubs) },
#endif
    {    &LuPixbufClassData.getRowSize,
         &somId_getRowSize,
         &somDI_getRowSize,
         (somMethodProc *) getRowSize,
         (somMethodProc *)((void*)-1),
#ifdef getRowSize_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getRowSizeStubs) },
#endif
    {    &LuPixbufClassData.getDataLen,
         &somId_getDataLen,
         &somDI_getDataLen,
         (somMethodProc *) getDataLen,
         (somMethodProc *)((void*)-1),
#ifdef getDataLen_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getDataLenStubs) },
#endif
    {    &LuPixbufClassData.getDataPtr,
         &somId_getDataPtr,
         &somDI_getDataPtr,
         (somMethodProc *) getDataPtr,
         (somMethodProc *)((void*)-1),
#ifdef getDataPtr_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getDataPtrStubs) },
#endif
    {    &LuPixbufClassData.putAt,
         &somId_putAt,
         &somDI_putAt,
         (somMethodProc *) putAt,
         (somMethodProc *)((void*)-1),
#ifdef putAt_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &putAtStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t LuPixbufOM[] = {
    {    &somId_LuPixbufsomDestruct,
         (somMethodProc *) somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_LuPixbuf = "LuPixbuf";
static char * somPCN_LuPixbuf_SOMObject = "SOMObject";

static somId somPCLuPixbuf[] = {
    &somPCN_LuPixbuf_SOMObject,
};

static somId somINITLuPixbuf[] = {
    &somMN_LuPixbufInit,
};

static somStaticClassInfo LuPixbufSCI = {
    4, 7, 1, 0, 0, 0, /* layout version 4 */ 
    LuPixbuf_MajorVersion, LuPixbuf_MinorVersion,
    sizeof(LuPixbufData), LuPixbuf_MaxNoMethods, 1,
    &somCN_LuPixbuf,
    (somId) NULL, 1,
    somPCLuPixbuf,
    (somClassDataStructure *) &LuPixbufClassData,
    (somCClassDataStructure *) &LuPixbufCClassData,
    LuPixbufSM, LuPixbufOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    7, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    1, /* number of initializers */
    somINITLuPixbuf, /* initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK LuPixbufNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_LuPixbuf && _LuPixbuf->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_LuPixbuf));
    SOMObjectNewClass(SOMObject_MajorVersion,SOMObject_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&LuPixbufSCI, somtmajorVersion, somtminorVersion));
    return result;
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */
#define LuPixbuf_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)LuPixbufCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (LuPixbufData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define LuPixbuf_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   LuPixbuf_DeInit_SOMObject_somDestruct(somSelf,0,ctrl); \
   if (doFree) _LuPixbuf->somDeallocate((string)somSelf);
#define LuPixbuf_BeginInitializer_LuPixbufInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)LuPixbufCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (LuPixbufData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for SOMObject */
#define LuPixbuf_Init_SOMObject_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
        /* special case SOMObject */\
        ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info));
#define LuPixbuf_DeInit_SOMObject_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
        /* special case SOMObject */\
        ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info));

#endif /* Primary Implementation Support */

#endif       /* SOM_LuPixbuf_xih */
