
/*
 * This file was generated by the SOM Compiler.
 * FileName: luinode.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_LuIndexNode_xh
#define SOM_LuIndexNode_xh

class LuIndexNode;

#define LuIndexNode_MajorVersion 0
#define LuIndexNode_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */


#include <lutypes.h>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef LuIndexNode_API
#define LuIndexNode_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the LuIndexNode Class */
SOMEXTERN SOMClass * SOMLINK LuIndexNodeNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the LuIndexNode class object, and the methods it introduces. */
SOMEXTERNS struct LuIndexNodeClassDataStructure {
	SOMClass *classObject;
	somMToken LuIndexNodeInit;
	somMToken addChild;
	somMToken getFirstChild;
	somMToken getNextChild;
	somMToken getLink;
} SOMDLINK LuIndexNodeClassData;
#define _LuIndexNode LuIndexNodeClassData.classObject

/* The API to parentMtabs for LuIndexNode, and the instance data it introduces. */
SOMEXTERNS struct LuIndexNodeCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK LuIndexNodeCClassData;

/*
 * -- Typedefs for LuIndexNode Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_LuIndexNode_LuIndexNodeInit(LuIndexNode *somSelf, Environment *ev, 
		somInitCtrl* ctrl, 
		LuLink* link);
typedef somTP_LuIndexNode_LuIndexNodeInit *somTD_LuIndexNode_LuIndexNodeInit;
typedef void   SOMLINK somTP_LuIndexNode_addChild(LuIndexNode *somSelf, Environment *ev, 
		LuIndexNode* node);
typedef somTP_LuIndexNode_addChild *somTD_LuIndexNode_addChild;
typedef LuIndexNode*   SOMLINK somTP_LuIndexNode_getFirstChild(LuIndexNode *somSelf, Environment *ev);
typedef somTP_LuIndexNode_getFirstChild *somTD_LuIndexNode_getFirstChild;
typedef LuIndexNode*   SOMLINK somTP_LuIndexNode_getNextChild(LuIndexNode *somSelf, Environment *ev);
typedef somTP_LuIndexNode_getNextChild *somTD_LuIndexNode_getNextChild;
typedef LuLink*   SOMLINK somTP_LuIndexNode_getLink(LuIndexNode *somSelf, Environment *ev);
typedef somTP_LuIndexNode_getLink *somTD_LuIndexNode_getLink;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_LuIndexNode_somDefaultInit(LuIndexNode *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_LuIndexNode_somDefaultInit *somTD_LuIndexNode_somDefaultInit;
typedef void   SOMLINK somTP_LuIndexNode_somDestruct(LuIndexNode *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_LuIndexNode_somDestruct *somTD_LuIndexNode_somDestruct;
typedef void   SOMLINK somTP_LuIndexNode_somDefaultCopyInit(LuIndexNode *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuIndexNode_somDefaultCopyInit *somTD_LuIndexNode_somDefaultCopyInit;
typedef LuIndexNode*   SOMLINK somTP_LuIndexNode_somDefaultAssign(LuIndexNode *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuIndexNode_somDefaultAssign *somTD_LuIndexNode_somDefaultAssign;
typedef void   SOMLINK somTP_LuIndexNode_somDefaultConstCopyInit(LuIndexNode *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuIndexNode_somDefaultConstCopyInit *somTD_LuIndexNode_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_LuIndexNode_somDefaultVCopyInit(LuIndexNode *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuIndexNode_somDefaultVCopyInit *somTD_LuIndexNode_somDefaultVCopyInit;
typedef void   SOMLINK somTP_LuIndexNode_somDefaultConstVCopyInit(LuIndexNode *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuIndexNode_somDefaultConstVCopyInit *somTD_LuIndexNode_somDefaultConstVCopyInit;
typedef LuIndexNode*   SOMLINK somTP_LuIndexNode_somDefaultConstAssign(LuIndexNode *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuIndexNode_somDefaultConstAssign *somTD_LuIndexNode_somDefaultConstAssign;
typedef LuIndexNode*   SOMLINK somTP_LuIndexNode_somDefaultVAssign(LuIndexNode *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuIndexNode_somDefaultVAssign *somTD_LuIndexNode_somDefaultVAssign;
typedef LuIndexNode*   SOMLINK somTP_LuIndexNode_somDefaultConstVAssign(LuIndexNode *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuIndexNode_somDefaultConstVAssign *somTD_LuIndexNode_somDefaultConstVAssign;
typedef void   SOMLINK somTP_LuIndexNode_somInit(LuIndexNode *somSelf);
typedef somTP_LuIndexNode_somInit *somTD_LuIndexNode_somInit;
typedef void   SOMLINK somTP_LuIndexNode_somFree(LuIndexNode *somSelf);
typedef somTP_LuIndexNode_somFree *somTD_LuIndexNode_somFree;
typedef void   SOMLINK somTP_LuIndexNode_somUninit(LuIndexNode *somSelf);
typedef somTP_LuIndexNode_somUninit *somTD_LuIndexNode_somUninit;
typedef SOMClass*   SOMLINK somTP_LuIndexNode_somGetClass(LuIndexNode *somSelf);
typedef somTP_LuIndexNode_somGetClass *somTD_LuIndexNode_somGetClass;
typedef string   SOMLINK somTP_LuIndexNode_somGetClassName(LuIndexNode *somSelf);
typedef somTP_LuIndexNode_somGetClassName *somTD_LuIndexNode_somGetClassName;
typedef long   SOMLINK somTP_LuIndexNode_somGetSize(LuIndexNode *somSelf);
typedef somTP_LuIndexNode_somGetSize *somTD_LuIndexNode_somGetSize;
typedef boolean   SOMLINK somTP_LuIndexNode_somIsA(LuIndexNode *somSelf, 
		SOMClass* aClassObj);
typedef somTP_LuIndexNode_somIsA *somTD_LuIndexNode_somIsA;
typedef boolean   SOMLINK somTP_LuIndexNode_somIsInstanceOf(LuIndexNode *somSelf, 
		SOMClass* aClassObj);
typedef somTP_LuIndexNode_somIsInstanceOf *somTD_LuIndexNode_somIsInstanceOf;
typedef boolean   SOMLINK somTP_LuIndexNode_somRespondsTo(LuIndexNode *somSelf, 
		somId mId);
typedef somTP_LuIndexNode_somRespondsTo *somTD_LuIndexNode_somRespondsTo;
typedef boolean   SOMLINK somTP_LuIndexNode_somDispatch(LuIndexNode *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_LuIndexNode_somDispatch *somTD_LuIndexNode_somDispatch;
typedef boolean   SOMLINK somTP_LuIndexNode_somClassDispatch(LuIndexNode *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_LuIndexNode_somClassDispatch *somTD_LuIndexNode_somClassDispatch;
typedef boolean   SOMLINK somTP_LuIndexNode_somCastObj(LuIndexNode *somSelf, 
		SOMClass* cls);
typedef somTP_LuIndexNode_somCastObj *somTD_LuIndexNode_somCastObj;
typedef boolean   SOMLINK somTP_LuIndexNode_somResetObj(LuIndexNode *somSelf);
typedef somTP_LuIndexNode_somResetObj *somTD_LuIndexNode_somResetObj;
typedef void   SOMLINK somTP_LuIndexNode_somDispatchV(LuIndexNode *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuIndexNode_somDispatchV *somTD_LuIndexNode_somDispatchV;
typedef long   SOMLINK somTP_LuIndexNode_somDispatchL(LuIndexNode *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuIndexNode_somDispatchL *somTD_LuIndexNode_somDispatchL;
typedef void*   SOMLINK somTP_LuIndexNode_somDispatchA(LuIndexNode *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuIndexNode_somDispatchA *somTD_LuIndexNode_somDispatchA;
typedef double   SOMLINK somTP_LuIndexNode_somDispatchD(LuIndexNode *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuIndexNode_somDispatchD *somTD_LuIndexNode_somDispatchD;
typedef SOMObject*   SOMLINK somTP_LuIndexNode_somPrintSelf(LuIndexNode *somSelf);
typedef somTP_LuIndexNode_somPrintSelf *somTD_LuIndexNode_somPrintSelf;
typedef void   SOMLINK somTP_LuIndexNode_somDumpSelf(LuIndexNode *somSelf, 
		long level);
typedef somTP_LuIndexNode_somDumpSelf *somTD_LuIndexNode_somDumpSelf;
typedef void   SOMLINK somTP_LuIndexNode_somDumpSelfInt(LuIndexNode *somSelf, 
		long level);
typedef somTP_LuIndexNode_somDumpSelfInt *somTD_LuIndexNode_somDumpSelfInt;
}

#endif /* LuIndexNode_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for LuIndexNode
 */
class LuIndexNode : public SOMObject
{
public:

// LuIndexNode::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_LuIndexNode) LuIndexNodeNewClass(LuIndexNode_MajorVersion,LuIndexNode_MinorVersion);
   return (void*)
      SOM_Resolve(_LuIndexNode,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_LuIndexNode));
}

// LuIndexNode::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

LuIndexNode& operator=(LuIndexNode& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

LuIndexNode()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuIndexNodeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

LuIndexNode(LuIndexNode* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuIndexNodeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
LuIndexNode(const LuIndexNode* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuIndexNodeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif

LuIndexNode(Environment *ev,LuLink* link) 
{
   LuIndexNodeInit(ev,0,link);
}


/* initializer method: LuIndexNodeInit */
void   LuIndexNodeInit(Environment *ev, 
		somInitCtrl* ctrl, 
		LuLink* link)
{
   SOM_ResolveD(this,LuIndexNode,LuIndexNode,LuIndexNodeInit)
	(this, ev,ctrl,link);
}


/* method: addChild */
void   addChild(Environment *ev, 
		LuIndexNode* node)
{
   SOM_ResolveD(this,LuIndexNode,LuIndexNode,addChild)
	(this, ev,node);
}


/* method: getFirstChild */
LuIndexNode*   getFirstChild(Environment *ev)
{
   return SOM_ResolveD(this,LuIndexNode,LuIndexNode,getFirstChild)
	(this, ev);
}


/* method: getNextChild */
LuIndexNode*   getNextChild(Environment *ev)
{
   return SOM_ResolveD(this,LuIndexNode,LuIndexNode,getNextChild)
	(this, ev);
}


/* method: getLink */
LuLink*   getLink(Environment *ev)
{
   return SOM_ResolveD(this,LuIndexNode,LuIndexNode,getLink)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,LuIndexNode,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
   SOM_ResolveD(this,LuIndexNode,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuIndexNode,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
LuIndexNode*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuIndexNode,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuIndexNode,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuIndexNode,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
LuIndexNode*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
LuIndexNode*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
LuIndexNode*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,LuIndexNode,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,LuIndexNode,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,LuIndexNode,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/* the va_list invocation form */
boolean   LuIndexNode_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,LuIndexNode,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LuIndexNode,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/* the va_list invocation form */
boolean   LuIndexNode_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,LuIndexNode,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LuIndexNode,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/* the va_list invocation form */
void   LuIndexNode_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,LuIndexNode,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,LuIndexNode,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/* the va_list invocation form */
long   LuIndexNode_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuIndexNode,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,LuIndexNode,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/* the va_list invocation form */
void*   LuIndexNode_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuIndexNode,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,LuIndexNode,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/* the va_list invocation form */
double   LuIndexNode_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuIndexNode,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,LuIndexNode,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,LuIndexNode,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,LuIndexNode,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,LuIndexNode,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* LuIndexNode */



#endif       /* SOM_LuIndexNode_xh */
