
/*
 * This file was generated by the SOM Compiler.
 * FileName: lujpeg.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxih: 2.47
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_LuJpegDocument_xih
#define SOM_LuJpegDocument_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_LuJpegDocument_xh
#include <lujpeg.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define LuJpegDocument_MaxNoMethods 0

/*
 * -- Instance Data
 */
typedef struct {
	void* data;
} LuJpegDocumentData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef LuJpegDocumentData* (SOMLINK * somTD_LuJpegDocument_DataThunk)(void*);
#define LuJpegDocumentGetData(somSelf) \
   (((somTD_LuJpegDocument_DataThunk)(LuJpegDocumentCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _data (somThis->data)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(LuJpegDocument_Class_Source) || defined(SOM_Module_lujpeg_Source))

/*
 * Trace/Debug macro
 */
#ifndef LuJpegDocumentMethodDebug
   #define LuJpegDocumentMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _loadFile somSelf->loadFile
  #define _isScalable somSelf->isScalable
  #define _isRotable somSelf->isRotable
  #define _getPageCount somSelf->getPageCount
  #define _getPageSize somSelf->getPageSize
  #define _renderPageToPixbuf somSelf->renderPageToPixbuf
  #define _isHaveText somSelf->isHaveText
  #define _getSelectionRectangles somSelf->getSelectionRectangles
  #define _freeRectangles somSelf->freeRectangles
  #define _getText somSelf->getText
  #define _isHaveLinks somSelf->isHaveLinks
  #define _getLinkMapping somSelf->getLinkMapping
  #define _freeLinkMapping somSelf->freeLinkMapping
  #define _isSaveable somSelf->isSaveable
  #define _saveAs somSelf->saveAs
  #define _isPSExportable somSelf->isPSExportable
  #define _exportToPS somSelf->exportToPS
  #define _isHaveFontInfo somSelf->isHaveFontInfo
  #define _getFontInfo somSelf->getFontInfo
  #define _freeFontInfo somSelf->freeFontInfo
  #define _isHaveIndex somSelf->isHaveIndex
  #define _getIndex somSelf->getIndex
  #define _getDocumentInfo somSelf->getDocumentInfo
  #define _freeDocumentInfo somSelf->freeDocumentInfo
  #define _getThumbnailSize somSelf->getThumbnailSize
  #define _getThumbnail somSelf->getThumbnail
  #define _searchText somSelf->searchText
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _loadFile somSelf->loadFile
  #define _getPageCount somSelf->getPageCount
  #define _getPageSize somSelf->getPageSize
  #define _renderPageToPixbuf somSelf->renderPageToPixbuf
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The LuJpegDocument ClassData Structure
 */
SOMEXTERN struct LuJpegDocumentClassDataStructure SOMDLINK LuJpegDocumentClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary LuJpegDocument ClassData structure
 */
SOMEXTERN struct LuJpegDocumentCClassDataStructure SOMDLINK LuJpegDocumentCClassData = {(somMethodTabs) NULL};


/*
 * Overridden method: loadFile
 */
SOM_Scope boolean  SOMLINK loadFile(LuJpegDocument *somSelf, Environment *ev,
		string filename,
		string password,
		string* error);
static char *somMN_LuJpegDocumentloadFile = "LuDocument::loadFile";
static somId somId_LuJpegDocumentloadFile = &somMN_LuJpegDocumentloadFile;
#ifdef somId_loadFile
#undef somId_loadFile
#else
#define somId_loadFile somId_LuJpegDocumentloadFile
#endif
typedef boolean   SOMLINK somTP_xih_LuJpegDocument_loadFile(LuJpegDocument *somSelf, Environment *ev, 
		string filename, 
		string password, 
		string* error);
typedef somTP_xih_LuJpegDocument_loadFile *somTD_xih_LuJpegDocument_loadFile;
/* define the parent method call macro */
static somMethodProc* LuJpegDocument_parent_LuDocument_loadFile_resolved;
#define LuJpegDocument_parent_LuDocument_loadFile(somSelf,ev,filename,password,error) \
  ((( somTD_xih_LuJpegDocument_loadFile ) \
      LuJpegDocument_parent_LuDocument_loadFile_resolved) \
	(somSelf,ev,filename,password,error))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_loadFile
  #ifdef parent_loadFile
    #define SOMGD_pmc_parent_loadFile
    #undef parent_loadFile
  #else
#define parent_loadFile LuJpegDocument_parent_LuDocument_loadFile
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_loadFile
  #ifdef parent_LuDocument_loadFile
    #define SOMGD_pmc_parent_LuDocument_loadFile
    #undef parent_LuDocument_loadFile
  #else
    #define parent_LuDocument_loadFile LuJpegDocument_parent_LuDocument_loadFile
  #endif
#endif
#define LuJpegDocument_parents_loadFile(somSelf,ev,filename,password,error) (\
   LuJpegDocument_parent_LuDocument_loadFile(somSelf,ev,filename,password,error))

/*
 * Overridden method: getPageCount
 */
SOM_Scope long  SOMLINK getPageCount(LuJpegDocument *somSelf, Environment *ev);
static char *somMN_LuJpegDocumentgetPageCount = "LuDocument::getPageCount";
static somId somId_LuJpegDocumentgetPageCount = &somMN_LuJpegDocumentgetPageCount;
#ifdef somId_getPageCount
#undef somId_getPageCount
#else
#define somId_getPageCount somId_LuJpegDocumentgetPageCount
#endif
typedef long   SOMLINK somTP_xih_LuJpegDocument_getPageCount(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_xih_LuJpegDocument_getPageCount *somTD_xih_LuJpegDocument_getPageCount;
/* define the parent method call macro */
static somMethodProc* LuJpegDocument_parent_LuDocument_getPageCount_resolved;
#define LuJpegDocument_parent_LuDocument_getPageCount(somSelf,ev) \
  ((( somTD_xih_LuJpegDocument_getPageCount ) \
      LuJpegDocument_parent_LuDocument_getPageCount_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getPageCount
  #ifdef parent_getPageCount
    #define SOMGD_pmc_parent_getPageCount
    #undef parent_getPageCount
  #else
#define parent_getPageCount LuJpegDocument_parent_LuDocument_getPageCount
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getPageCount
  #ifdef parent_LuDocument_getPageCount
    #define SOMGD_pmc_parent_LuDocument_getPageCount
    #undef parent_LuDocument_getPageCount
  #else
    #define parent_LuDocument_getPageCount LuJpegDocument_parent_LuDocument_getPageCount
  #endif
#endif
#define LuJpegDocument_parents_getPageCount(somSelf,ev) (\
   LuJpegDocument_parent_LuDocument_getPageCount(somSelf,ev))

/*
 * Overridden method: getPageSize
 */
SOM_Scope void  SOMLINK getPageSize(LuJpegDocument *somSelf, Environment *ev,
		long pagenum,
		double* width,
		double* height);
static char *somMN_LuJpegDocumentgetPageSize = "LuDocument::getPageSize";
static somId somId_LuJpegDocumentgetPageSize = &somMN_LuJpegDocumentgetPageSize;
#ifdef somId_getPageSize
#undef somId_getPageSize
#else
#define somId_getPageSize somId_LuJpegDocumentgetPageSize
#endif
typedef void   SOMLINK somTP_xih_LuJpegDocument_getPageSize(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum, 
		double* width, 
		double* height);
typedef somTP_xih_LuJpegDocument_getPageSize *somTD_xih_LuJpegDocument_getPageSize;
/* define the parent method call macro */
static somMethodProc* LuJpegDocument_parent_LuDocument_getPageSize_resolved;
#define LuJpegDocument_parent_LuDocument_getPageSize(somSelf,ev,pagenum,width,height) \
  ((( somTD_xih_LuJpegDocument_getPageSize ) \
      LuJpegDocument_parent_LuDocument_getPageSize_resolved) \
	(somSelf,ev,pagenum,width,height))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_getPageSize
  #ifdef parent_getPageSize
    #define SOMGD_pmc_parent_getPageSize
    #undef parent_getPageSize
  #else
#define parent_getPageSize LuJpegDocument_parent_LuDocument_getPageSize
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_getPageSize
  #ifdef parent_LuDocument_getPageSize
    #define SOMGD_pmc_parent_LuDocument_getPageSize
    #undef parent_LuDocument_getPageSize
  #else
    #define parent_LuDocument_getPageSize LuJpegDocument_parent_LuDocument_getPageSize
  #endif
#endif
#define LuJpegDocument_parents_getPageSize(somSelf,ev,pagenum,width,height) (\
   LuJpegDocument_parent_LuDocument_getPageSize(somSelf,ev,pagenum,width,height))

/*
 * Overridden method: renderPageToPixbuf
 */
SOM_Scope void  SOMLINK renderPageToPixbuf(LuJpegDocument *somSelf, Environment *ev,
		long pagenum,
		long src_x,
		long src_y,
		long src_width,
		long src_height,
		double scale,
		long rotation,
		LuPixbuf* pixbuf);
static char *somMN_LuJpegDocumentrenderPageToPixbuf = "LuDocument::renderPageToPixbuf";
static somId somId_LuJpegDocumentrenderPageToPixbuf = &somMN_LuJpegDocumentrenderPageToPixbuf;
#ifdef somId_renderPageToPixbuf
#undef somId_renderPageToPixbuf
#else
#define somId_renderPageToPixbuf somId_LuJpegDocumentrenderPageToPixbuf
#endif
typedef void   SOMLINK somTP_xih_LuJpegDocument_renderPageToPixbuf(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf);
typedef somTP_xih_LuJpegDocument_renderPageToPixbuf *somTD_xih_LuJpegDocument_renderPageToPixbuf;
/* define the parent method call macro */
static somMethodProc* LuJpegDocument_parent_LuDocument_renderPageToPixbuf_resolved;
#define LuJpegDocument_parent_LuDocument_renderPageToPixbuf(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf) \
  ((( somTD_xih_LuJpegDocument_renderPageToPixbuf ) \
      LuJpegDocument_parent_LuDocument_renderPageToPixbuf_resolved) \
	(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_renderPageToPixbuf
  #ifdef parent_renderPageToPixbuf
    #define SOMGD_pmc_parent_renderPageToPixbuf
    #undef parent_renderPageToPixbuf
  #else
#define parent_renderPageToPixbuf LuJpegDocument_parent_LuDocument_renderPageToPixbuf
  #endif
#endif
#ifndef SOMGD_pmc_parent_LuDocument_renderPageToPixbuf
  #ifdef parent_LuDocument_renderPageToPixbuf
    #define SOMGD_pmc_parent_LuDocument_renderPageToPixbuf
    #undef parent_LuDocument_renderPageToPixbuf
  #else
    #define parent_LuDocument_renderPageToPixbuf LuJpegDocument_parent_LuDocument_renderPageToPixbuf
  #endif
#endif
#define LuJpegDocument_parents_renderPageToPixbuf(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf) (\
   LuJpegDocument_parent_LuDocument_renderPageToPixbuf(somSelf,ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf))

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK somDefaultInit(LuJpegDocument *somSelf,
		som3InitCtrl* ctrl);
static char *somMN_LuJpegDocumentsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_LuJpegDocumentsomDefaultInit = &somMN_LuJpegDocumentsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_LuJpegDocumentsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK somDestruct(LuJpegDocument *somSelf,
		octet doFree,
		som3DestructCtrl* ctrl);
static char *somMN_LuJpegDocumentsomDestruct = "SOMObject::somDestruct";
static somId somId_LuJpegDocumentsomDestruct = &somMN_LuJpegDocumentsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_LuJpegDocumentsomDestruct
#endif

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t LuJpegDocumentOM[] = {
    {    &somId_LuJpegDocumentloadFile,
         (somMethodProc *) loadFile  },
    {    &somId_LuJpegDocumentgetPageCount,
         (somMethodProc *) getPageCount  },
    {    &somId_LuJpegDocumentgetPageSize,
         (somMethodProc *) getPageSize  },
    {    &somId_LuJpegDocumentrenderPageToPixbuf,
         (somMethodProc *) renderPageToPixbuf  },
    {    &somId_LuJpegDocumentsomDefaultInit,
         (somMethodProc *) somDefaultInit  },
    {    &somId_LuJpegDocumentsomDestruct,
         (somMethodProc *) somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_LuJpegDocument = "LuJpegDocument";
static char * somPCN_LuJpegDocument_LuDocument = "LuDocument";

static somId somPCLuJpegDocument[] = {
    &somPCN_LuJpegDocument_LuDocument,
};

static somStaticClassInfo LuJpegDocumentSCI = {
    4, 0, 6, 0, 0, 0, /* layout version 4 */ 
    LuJpegDocument_MajorVersion, LuJpegDocument_MinorVersion,
    sizeof(LuJpegDocumentData), LuJpegDocument_MaxNoMethods, 1,
    &somCN_LuJpegDocument,
    (somId) NULL, 1,
    somPCLuJpegDocument,
    (somClassDataStructure *) &LuJpegDocumentClassData,
    (somCClassDataStructure *) &LuJpegDocumentCClassData,
    (somStaticMethod_t *) NULL, LuJpegDocumentOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK LuJpegDocumentNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_LuJpegDocument && _LuJpegDocument->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_LuJpegDocument));
    LuDocumentNewClass(LuDocument_MajorVersion,LuDocument_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&LuJpegDocumentSCI, somtmajorVersion, somtminorVersion));
    LuJpegDocument_parent_LuDocument_renderPageToPixbuf_resolved = 
	somParentNumResolve(LuJpegDocumentCClassData.parentMtab, 1, LuDocumentClassData.renderPageToPixbuf);
    LuJpegDocument_parent_LuDocument_getPageSize_resolved = 
	somParentNumResolve(LuJpegDocumentCClassData.parentMtab, 1, LuDocumentClassData.getPageSize);
    LuJpegDocument_parent_LuDocument_getPageCount_resolved = 
	somParentNumResolve(LuJpegDocumentCClassData.parentMtab, 1, LuDocumentClassData.getPageCount);
    LuJpegDocument_parent_LuDocument_loadFile_resolved = 
	somParentNumResolve(LuJpegDocumentCClassData.parentMtab, 1, LuDocumentClassData.loadFile);
    return result;
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */
#define LuJpegDocument_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)LuJpegDocumentCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (LuJpegDocumentData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define LuJpegDocument_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)LuJpegDocumentCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (LuJpegDocumentData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define LuJpegDocument_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   LuJpegDocument_DeInit_LuDocument_somDestruct(somSelf,0,ctrl); \
   if (doFree) _LuJpegDocument->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for LuDocument */
#define LuJpegDocument_Init_LuDocument_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDefaultInit) \
               ctrl->info->defaultInit) \
                   ((SOMObject *)((void *) somSelf), ctrl)
#define LuJpegDocument_DeInit_LuDocument_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDestruct) \
               ctrl->info->defaultDestruct) \
                   ((SOMObject *)((void *) somSelf), 0, ctrl)

#endif /* Primary Implementation Support */

#endif       /* SOM_LuJpegDocument_xih */
