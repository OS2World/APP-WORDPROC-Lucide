
/*
 * This file was generated by the SOM Compiler.
 * FileName: lujpeg.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_LuJpegDocument_xh
#define SOM_LuJpegDocument_xh

class LuJpegDocument;

#define LuJpegDocument_MajorVersion 0
#define LuJpegDocument_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_LuDocument_xh
#include <ludoc.xh>
#endif

#ifndef LuJpegDocument_API
#define LuJpegDocument_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the LuJpegDocument Class */
SOMEXTERN SOMClass * SOMLINK LuJpegDocumentNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the LuJpegDocument class object, and the methods it introduces. */
SOMEXTERN struct LuJpegDocumentClassDataStructure {
	SOMClass *classObject;
} SOMDLINK LuJpegDocumentClassData;
#define _LuJpegDocument LuJpegDocumentClassData.classObject

/* The API to parentMtabs for LuJpegDocument, and the instance data it introduces. */
SOMEXTERN struct LuJpegDocumentCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK LuJpegDocumentCClassData;

/*
 * -- Typedefs for LuJpegDocument Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef boolean   SOMLINK somTP_LuJpegDocument_loadFile(LuJpegDocument *somSelf, Environment *ev, 
		string filename, 
		string password, 
		string* error);
typedef somTP_LuJpegDocument_loadFile *somTD_LuJpegDocument_loadFile;
typedef short   SOMLINK somTP_LuJpegDocument_getBpp(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_getBpp *somTD_LuJpegDocument_getBpp;
typedef boolean   SOMLINK somTP_LuJpegDocument_isScalable(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_isScalable *somTD_LuJpegDocument_isScalable;
typedef boolean   SOMLINK somTP_LuJpegDocument_isRotable(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_isRotable *somTD_LuJpegDocument_isRotable;
typedef long   SOMLINK somTP_LuJpegDocument_getPageCount(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_getPageCount *somTD_LuJpegDocument_getPageCount;
typedef void   SOMLINK somTP_LuJpegDocument_getPageSize(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum, 
		double* width, 
		double* height);
typedef somTP_LuJpegDocument_getPageSize *somTD_LuJpegDocument_getPageSize;
typedef void   SOMLINK somTP_LuJpegDocument_renderPageToPixbuf(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf);
typedef somTP_LuJpegDocument_renderPageToPixbuf *somTD_LuJpegDocument_renderPageToPixbuf;
typedef boolean   SOMLINK somTP_LuJpegDocument_isAsynchRenderingSupported(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_isAsynchRenderingSupported *somTD_LuJpegDocument_isAsynchRenderingSupported;
typedef void   SOMLINK somTP_LuJpegDocument_renderPageToPixbufAsynch(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf, 
		LuDocument_asynchCallbackFn fnd, 
		LuDocument_asynchCallbackFn fna, 
		somToken fndata);
typedef somTP_LuJpegDocument_renderPageToPixbufAsynch *somTD_LuJpegDocument_renderPageToPixbufAsynch;
typedef boolean   SOMLINK somTP_LuJpegDocument_isRenderIntoPS(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_isRenderIntoPS *somTD_LuJpegDocument_isRenderIntoPS;
typedef void   SOMLINK somTP_LuJpegDocument_renderPageToPS(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		unsigned long hps, 
		somMToken rect);
typedef somTP_LuJpegDocument_renderPageToPS *somTD_LuJpegDocument_renderPageToPS;
typedef boolean   SOMLINK somTP_LuJpegDocument_isHaveText(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_isHaveText *somTD_LuJpegDocument_isHaveText;
typedef LuDocument_LuRectSequence*   SOMLINK somTP_LuJpegDocument_getSelectionRectangles(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum, 
		LuRectangle* selection);
typedef somTP_LuJpegDocument_getSelectionRectangles *somTD_LuJpegDocument_getSelectionRectangles;
typedef void   SOMLINK somTP_LuJpegDocument_freeRectangles(Environment *ev, 
		LuDocument_LuRectSequence* rectangles);
typedef somTP_LuJpegDocument_freeRectangles *somTD_LuJpegDocument_freeRectangles;
typedef string   SOMLINK somTP_LuJpegDocument_getText(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum, 
		LuRectangle* selection);
typedef somTP_LuJpegDocument_getText *somTD_LuJpegDocument_getText;
typedef boolean   SOMLINK somTP_LuJpegDocument_isHaveLinks(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_isHaveLinks *somTD_LuJpegDocument_isHaveLinks;
typedef LuDocument_LuLinkMapSequence*   SOMLINK somTP_LuJpegDocument_getLinkMapping(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum);
typedef somTP_LuJpegDocument_getLinkMapping *somTD_LuJpegDocument_getLinkMapping;
typedef void   SOMLINK somTP_LuJpegDocument_freeLinkMapping(Environment *ev, 
		LuDocument_LuLinkMapSequence* mapping);
typedef somTP_LuJpegDocument_freeLinkMapping *somTD_LuJpegDocument_freeLinkMapping;
typedef boolean   SOMLINK somTP_LuJpegDocument_isSaveable(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_isSaveable *somTD_LuJpegDocument_isSaveable;
typedef boolean   SOMLINK somTP_LuJpegDocument_saveAs(LuJpegDocument *somSelf, Environment *ev, 
		string filename);
typedef somTP_LuJpegDocument_saveAs *somTD_LuJpegDocument_saveAs;
typedef boolean   SOMLINK somTP_LuJpegDocument_isPostScriptExportable(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_isPostScriptExportable *somTD_LuJpegDocument_isPostScriptExportable;
typedef void   SOMLINK somTP_LuJpegDocument_exportToPostScript(LuJpegDocument *somSelf, Environment *ev, 
		string filename, 
		long first_page, 
		long last_page, 
		double width, 
		double height, 
		boolean duplex);
typedef somTP_LuJpegDocument_exportToPostScript *somTD_LuJpegDocument_exportToPostScript;
typedef boolean   SOMLINK somTP_LuJpegDocument_isHaveFontInfo(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_isHaveFontInfo *somTD_LuJpegDocument_isHaveFontInfo;
typedef LuDocument_LuFontInfoSequence*   SOMLINK somTP_LuJpegDocument_getFontInfo(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_getFontInfo *somTD_LuJpegDocument_getFontInfo;
typedef void   SOMLINK somTP_LuJpegDocument_freeFontInfo(Environment *ev, 
		LuDocument_LuFontInfoSequence* fonts);
typedef somTP_LuJpegDocument_freeFontInfo *somTD_LuJpegDocument_freeFontInfo;
typedef boolean   SOMLINK somTP_LuJpegDocument_isHaveIndex(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_isHaveIndex *somTD_LuJpegDocument_isHaveIndex;
typedef LuIndexNode*   SOMLINK somTP_LuJpegDocument_getIndex(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_getIndex *somTD_LuJpegDocument_getIndex;
typedef LuDocumentInfo*   SOMLINK somTP_LuJpegDocument_getDocumentInfo(LuJpegDocument *somSelf, Environment *ev);
typedef somTP_LuJpegDocument_getDocumentInfo *somTD_LuJpegDocument_getDocumentInfo;
typedef void   SOMLINK somTP_LuJpegDocument_freeDocumentInfo(Environment *ev, 
		LuDocumentInfo* info);
typedef somTP_LuJpegDocument_freeDocumentInfo *somTD_LuJpegDocument_freeDocumentInfo;
typedef boolean   SOMLINK somTP_LuJpegDocument_getThumbnailSize(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum, 
		short suggested_width, 
		short* width, 
		short* height);
typedef somTP_LuJpegDocument_getThumbnailSize *somTD_LuJpegDocument_getThumbnailSize;
typedef LuPixbuf*   SOMLINK somTP_LuJpegDocument_getThumbnail(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum, 
		short suggested_width);
typedef somTP_LuJpegDocument_getThumbnail *somTD_LuJpegDocument_getThumbnail;
typedef LuDocument_LuRectSequence*   SOMLINK somTP_LuJpegDocument_searchText(LuJpegDocument *somSelf, Environment *ev, 
		long pagenum, 
		string text, 
		boolean caseSensitive);
typedef somTP_LuJpegDocument_searchText *somTD_LuJpegDocument_searchText;
typedef void   SOMLINK somTP_LuJpegDocument_somDefaultInit(LuJpegDocument *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_LuJpegDocument_somDefaultInit *somTD_LuJpegDocument_somDefaultInit;
typedef void   SOMLINK somTP_LuJpegDocument_somDestruct(LuJpegDocument *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_LuJpegDocument_somDestruct *somTD_LuJpegDocument_somDestruct;
typedef void   SOMLINK somTP_LuJpegDocument_somDefaultCopyInit(LuJpegDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuJpegDocument_somDefaultCopyInit *somTD_LuJpegDocument_somDefaultCopyInit;
typedef LuJpegDocument*   SOMLINK somTP_LuJpegDocument_somDefaultAssign(LuJpegDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuJpegDocument_somDefaultAssign *somTD_LuJpegDocument_somDefaultAssign;
typedef void   SOMLINK somTP_LuJpegDocument_somDefaultConstCopyInit(LuJpegDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuJpegDocument_somDefaultConstCopyInit *somTD_LuJpegDocument_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_LuJpegDocument_somDefaultVCopyInit(LuJpegDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuJpegDocument_somDefaultVCopyInit *somTD_LuJpegDocument_somDefaultVCopyInit;
typedef void   SOMLINK somTP_LuJpegDocument_somDefaultConstVCopyInit(LuJpegDocument *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuJpegDocument_somDefaultConstVCopyInit *somTD_LuJpegDocument_somDefaultConstVCopyInit;
typedef LuJpegDocument*   SOMLINK somTP_LuJpegDocument_somDefaultConstAssign(LuJpegDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuJpegDocument_somDefaultConstAssign *somTD_LuJpegDocument_somDefaultConstAssign;
typedef LuJpegDocument*   SOMLINK somTP_LuJpegDocument_somDefaultVAssign(LuJpegDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuJpegDocument_somDefaultVAssign *somTD_LuJpegDocument_somDefaultVAssign;
typedef LuJpegDocument*   SOMLINK somTP_LuJpegDocument_somDefaultConstVAssign(LuJpegDocument *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_LuJpegDocument_somDefaultConstVAssign *somTD_LuJpegDocument_somDefaultConstVAssign;
typedef void   SOMLINK somTP_LuJpegDocument_somInit(LuJpegDocument *somSelf);
typedef somTP_LuJpegDocument_somInit *somTD_LuJpegDocument_somInit;
typedef void   SOMLINK somTP_LuJpegDocument_somFree(LuJpegDocument *somSelf);
typedef somTP_LuJpegDocument_somFree *somTD_LuJpegDocument_somFree;
typedef void   SOMLINK somTP_LuJpegDocument_somUninit(LuJpegDocument *somSelf);
typedef somTP_LuJpegDocument_somUninit *somTD_LuJpegDocument_somUninit;
typedef SOMClass*   SOMLINK somTP_LuJpegDocument_somGetClass(LuJpegDocument *somSelf);
typedef somTP_LuJpegDocument_somGetClass *somTD_LuJpegDocument_somGetClass;
typedef string   SOMLINK somTP_LuJpegDocument_somGetClassName(LuJpegDocument *somSelf);
typedef somTP_LuJpegDocument_somGetClassName *somTD_LuJpegDocument_somGetClassName;
typedef long   SOMLINK somTP_LuJpegDocument_somGetSize(LuJpegDocument *somSelf);
typedef somTP_LuJpegDocument_somGetSize *somTD_LuJpegDocument_somGetSize;
typedef boolean   SOMLINK somTP_LuJpegDocument_somIsA(LuJpegDocument *somSelf, 
		SOMClass* aClassObj);
typedef somTP_LuJpegDocument_somIsA *somTD_LuJpegDocument_somIsA;
typedef boolean   SOMLINK somTP_LuJpegDocument_somIsInstanceOf(LuJpegDocument *somSelf, 
		SOMClass* aClassObj);
typedef somTP_LuJpegDocument_somIsInstanceOf *somTD_LuJpegDocument_somIsInstanceOf;
typedef boolean   SOMLINK somTP_LuJpegDocument_somRespondsTo(LuJpegDocument *somSelf, 
		somId mId);
typedef somTP_LuJpegDocument_somRespondsTo *somTD_LuJpegDocument_somRespondsTo;
typedef boolean   SOMLINK somTP_LuJpegDocument_somDispatch(LuJpegDocument *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_LuJpegDocument_somDispatch *somTD_LuJpegDocument_somDispatch;
typedef boolean   SOMLINK somTP_LuJpegDocument_somClassDispatch(LuJpegDocument *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_LuJpegDocument_somClassDispatch *somTD_LuJpegDocument_somClassDispatch;
typedef boolean   SOMLINK somTP_LuJpegDocument_somCastObj(LuJpegDocument *somSelf, 
		SOMClass* cls);
typedef somTP_LuJpegDocument_somCastObj *somTD_LuJpegDocument_somCastObj;
typedef boolean   SOMLINK somTP_LuJpegDocument_somResetObj(LuJpegDocument *somSelf);
typedef somTP_LuJpegDocument_somResetObj *somTD_LuJpegDocument_somResetObj;
typedef void   SOMLINK somTP_LuJpegDocument_somDispatchV(LuJpegDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuJpegDocument_somDispatchV *somTD_LuJpegDocument_somDispatchV;
typedef long   SOMLINK somTP_LuJpegDocument_somDispatchL(LuJpegDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuJpegDocument_somDispatchL *somTD_LuJpegDocument_somDispatchL;
typedef void*   SOMLINK somTP_LuJpegDocument_somDispatchA(LuJpegDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuJpegDocument_somDispatchA *somTD_LuJpegDocument_somDispatchA;
typedef double   SOMLINK somTP_LuJpegDocument_somDispatchD(LuJpegDocument *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_LuJpegDocument_somDispatchD *somTD_LuJpegDocument_somDispatchD;
typedef SOMObject*   SOMLINK somTP_LuJpegDocument_somPrintSelf(LuJpegDocument *somSelf);
typedef somTP_LuJpegDocument_somPrintSelf *somTD_LuJpegDocument_somPrintSelf;
typedef void   SOMLINK somTP_LuJpegDocument_somDumpSelf(LuJpegDocument *somSelf, 
		long level);
typedef somTP_LuJpegDocument_somDumpSelf *somTD_LuJpegDocument_somDumpSelf;
typedef void   SOMLINK somTP_LuJpegDocument_somDumpSelfInt(LuJpegDocument *somSelf, 
		long level);
typedef somTP_LuJpegDocument_somDumpSelfInt *somTD_LuJpegDocument_somDumpSelfInt;
}

#endif /* LuJpegDocument_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for LuJpegDocument
 */
class LuJpegDocument : public LuDocument
{
public:

// LuJpegDocument::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_LuJpegDocument) LuJpegDocumentNewClass(LuJpegDocument_MajorVersion,LuJpegDocument_MinorVersion);
   return (void*)
      SOM_Resolve(_LuJpegDocument,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_LuJpegDocument));
}

// LuJpegDocument::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

LuJpegDocument& operator=(LuJpegDocument& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

LuJpegDocument()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuJpegDocumentCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

LuJpegDocument(LuJpegDocument* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuJpegDocumentCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
LuJpegDocument(const LuJpegDocument* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (LuJpegDocumentCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/*
 * Reintroduce inherited methods
 */

/* method: loadFile */
boolean   loadFile(Environment *ev, 
		string filename, 
		string password, 
		string* error)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,loadFile)
	(this, ev,filename,password,error);
}


/* method: getBpp */
short   getBpp(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,getBpp)
	(this, ev);
}


/* method: isScalable */
boolean   isScalable(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,isScalable)
	(this, ev);
}


/* method: isRotable */
boolean   isRotable(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,isRotable)
	(this, ev);
}


/* method: getPageCount */
long   getPageCount(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,getPageCount)
	(this, ev);
}


/* method: getPageSize */
void   getPageSize(Environment *ev, 
		long pagenum, 
		double* width, 
		double* height)
{
   SOM_ResolveD(this,LuJpegDocument,LuDocument,getPageSize)
	(this, ev,pagenum,width,height);
}


/* method: renderPageToPixbuf */
void   renderPageToPixbuf(Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf)
{
   SOM_ResolveD(this,LuJpegDocument,LuDocument,renderPageToPixbuf)
	(this, ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf);
}


/* method: isAsynchRenderingSupported */
boolean   isAsynchRenderingSupported(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,isAsynchRenderingSupported)
	(this, ev);
}


/* method: renderPageToPixbufAsynch */
void   renderPageToPixbufAsynch(Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		LuPixbuf* pixbuf, 
		LuDocument_asynchCallbackFn fnd, 
		LuDocument_asynchCallbackFn fna, 
		somToken fndata)
{
   SOM_ResolveD(this,LuJpegDocument,LuDocument,renderPageToPixbufAsynch)
	(this, ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,pixbuf,fnd,fna,fndata);
}


/* method: isRenderIntoPS */
boolean   isRenderIntoPS(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,isRenderIntoPS)
	(this, ev);
}


/* method: renderPageToPS */
void   renderPageToPS(Environment *ev, 
		long pagenum, 
		long src_x, 
		long src_y, 
		long src_width, 
		long src_height, 
		double scale, 
		long rotation, 
		unsigned long hps, 
		somMToken rect)
{
   SOM_ResolveD(this,LuJpegDocument,LuDocument,renderPageToPS)
	(this, ev,pagenum,src_x,src_y,src_width,src_height,scale,rotation,hps,rect);
}


/* method: isHaveText */
boolean   isHaveText(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,isHaveText)
	(this, ev);
}


/* method: getSelectionRectangles */
LuDocument_LuRectSequence*   getSelectionRectangles(Environment *ev, 
		long pagenum, 
		LuRectangle* selection)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,getSelectionRectangles)
	(this, ev,pagenum,selection);
}


/* noself procedure: freeRectangles */
static void   freeRectangles(Environment *ev, 
		LuDocument_LuRectSequence* rectangles)
{
   ((somTD_LuJpegDocument_freeRectangles)LuDocumentClassData.freeRectangles)
	( ev,rectangles);
}


/* method: getText */
string   getText(Environment *ev, 
		long pagenum, 
		LuRectangle* selection)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,getText)
	(this, ev,pagenum,selection);
}


/* method: isHaveLinks */
boolean   isHaveLinks(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,isHaveLinks)
	(this, ev);
}


/* method: getLinkMapping */
LuDocument_LuLinkMapSequence*   getLinkMapping(Environment *ev, 
		long pagenum)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,getLinkMapping)
	(this, ev,pagenum);
}


/* noself procedure: freeLinkMapping */
static void   freeLinkMapping(Environment *ev, 
		LuDocument_LuLinkMapSequence* mapping)
{
   ((somTD_LuJpegDocument_freeLinkMapping)LuDocumentClassData.freeLinkMapping)
	( ev,mapping);
}


/* method: isSaveable */
boolean   isSaveable(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,isSaveable)
	(this, ev);
}


/* method: saveAs */
boolean   saveAs(Environment *ev, 
		string filename)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,saveAs)
	(this, ev,filename);
}


/* method: isPostScriptExportable */
boolean   isPostScriptExportable(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,isPostScriptExportable)
	(this, ev);
}


/* method: exportToPostScript */
void   exportToPostScript(Environment *ev, 
		string filename, 
		long first_page, 
		long last_page, 
		double width, 
		double height, 
		boolean duplex)
{
   SOM_ResolveD(this,LuJpegDocument,LuDocument,exportToPostScript)
	(this, ev,filename,first_page,last_page,width,height,duplex);
}


/* method: isHaveFontInfo */
boolean   isHaveFontInfo(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,isHaveFontInfo)
	(this, ev);
}


/* method: getFontInfo */
LuDocument_LuFontInfoSequence*   getFontInfo(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,getFontInfo)
	(this, ev);
}


/* noself procedure: freeFontInfo */
static void   freeFontInfo(Environment *ev, 
		LuDocument_LuFontInfoSequence* fonts)
{
   ((somTD_LuJpegDocument_freeFontInfo)LuDocumentClassData.freeFontInfo)
	( ev,fonts);
}


/* method: isHaveIndex */
boolean   isHaveIndex(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,isHaveIndex)
	(this, ev);
}


/* method: getIndex */
LuIndexNode*   getIndex(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,getIndex)
	(this, ev);
}


/* method: getDocumentInfo */
LuDocumentInfo*   getDocumentInfo(Environment *ev)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,getDocumentInfo)
	(this, ev);
}


/* noself procedure: freeDocumentInfo */
static void   freeDocumentInfo(Environment *ev, 
		LuDocumentInfo* info)
{
   ((somTD_LuJpegDocument_freeDocumentInfo)LuDocumentClassData.freeDocumentInfo)
	( ev,info);
}


/* method: getThumbnailSize */
boolean   getThumbnailSize(Environment *ev, 
		long pagenum, 
		short suggested_width, 
		short* width, 
		short* height)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,getThumbnailSize)
	(this, ev,pagenum,suggested_width,width,height);
}


/* method: getThumbnail */
LuPixbuf*   getThumbnail(Environment *ev, 
		long pagenum, 
		short suggested_width)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,getThumbnail)
	(this, ev,pagenum,suggested_width);
}


/* method: searchText */
LuDocument_LuRectSequence*   searchText(Environment *ev, 
		long pagenum, 
		string text, 
		boolean caseSensitive)
{
   return SOM_ResolveD(this,LuJpegDocument,LuDocument,searchText)
	(this, ev,pagenum,text,caseSensitive);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
LuJpegDocument*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
LuJpegDocument*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
LuJpegDocument*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
LuJpegDocument*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/* the va_list invocation form */
boolean   LuJpegDocument_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,LuJpegDocument,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LuJpegDocument,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/* the va_list invocation form */
boolean   LuJpegDocument_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,LuJpegDocument,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,LuJpegDocument,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/* the va_list invocation form */
void   LuJpegDocument_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,LuJpegDocument,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/* the va_list invocation form */
long   LuJpegDocument_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuJpegDocument,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,LuJpegDocument,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/* the va_list invocation form */
void*   LuJpegDocument_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuJpegDocument,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,LuJpegDocument,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/* the va_list invocation form */
double   LuJpegDocument_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,LuJpegDocument,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,LuJpegDocument,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,LuJpegDocument,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,LuJpegDocument,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* LuJpegDocument */



#endif       /* SOM_LuJpegDocument_xh */
